{
  "nodes": [
    {
      "id": "cron_trigger",
      "name": "DailyMorningReminder",
      "type": "TRIGGER",
      "subtype": "CRON",
      "position": {
        "x": 100,
        "y": 100
      },
      "description": "Triggers workflow at 9 AM on weekdays for daily check-ins",
      "input_ports": [],
      "input_params": {},
      "output_ports": [
        {
          "id": "main",
          "name": "main",
          "data_type": "dict",
          "description": "Scheduled execution output with timing information",
          "required": false,
          "max_connections": -1
        }
      ],
      "output_params": {
        "trigger_time": "",
        "scheduled_time": "",
        "execution_id": "",
        "cron_expression": "",
        "timezone": "",
        "trigger_message": ""
      },
      "attached_nodes": null,
      "configurations": {
        "cron_expression": "0 9 * * 1-5",
        "timezone": "UTC",
        "max_missed_runs": 3
      }
    },
    {
      "id": "slack_trigger",
      "name": "SlackAssistantMention",
      "type": "TRIGGER",
      "subtype": "SLACK",
      "position": {
        "x": 100,
        "y": 300
      },
      "description": "Triggers when bot is mentioned in #assistant channel",
      "input_ports": [],
      "input_params": {},
      "output_ports": [
        {
          "id": "main",
          "name": "main",
          "data_type": "dict",
          "description": "Slack event output with message and user data",
          "required": false,
          "max_connections": -1
        }
      ],
      "output_params": {
        "trigger_time": "",
        "execution_id": "",
        "event_type": "",
        "channel_id": "",
        "channel_name": "",
        "user_id": "",
        "user_name": "",
        "message_text": "",
        "thread_ts": "",
        "trigger_message": "",
        "slack_payload": {}
      },
      "attached_nodes": null,
      "configurations": {
        "workspace_id": "T1234567890",
        "events": ["app_mention"],
        "channels": ["assistant"],
        "keywords": [],
        "bot_token": "xoxb-your-bot-token",
        "signing_secret": "your-signing-secret",
        "filter_bot_messages": true,
        "include_thread_replies": true
      }
    },
    {
      "id": "working_memory",
      "name": "AssistantContextMemory",
      "type": "MEMORY",
      "subtype": "WORKING_MEMORY",
      "position": {
        "x": 450,
        "y": 50
      },
      "description": "Working memory for maintaining context, user preferences, and task history",
      "input_ports": [],
      "input_params": {
        "operation": "store",
        "key": "",
        "value": {},
        "importance": 0.5,
        "context": {},
        "ttl_override": null,
        "tags": []
      },
      "output_ports": [],
      "output_params": {
        "current_state": {},
        "recent_items": [],
        "reasoning_chain": [],
        "operation_result": {},
        "memory_stats": {},
        "context_summary": "",
        "related_items": []
      },
      "attached_nodes": null,
      "configurations": {
        "storage_backend": "redis",
        "ttl_seconds": 86400,
        "capacity_limit": 500,
        "eviction_policy": "importance",
        "namespace": "personal_assistant_context",
        "persistence_level": "session",
        "reasoning_context": true,
        "auto_organization": true,
        "compression": false,
        "access_optimization": "semantic"
      }
    },
    {
      "id": "notion_tool",
      "name": "NotionProjectsTasksTool",
      "type": "TOOL",
      "subtype": "NOTION_MCP_TOOL",
      "position": {
        "x": 450,
        "y": 400
      },
      "description": "Notion MCP tool for querying Projects & Tasks databases",
      "input_ports": [],
      "input_params": {
        "tool_name": "",
        "function_args": {},
        "context": {},
        "call_id": ""
      },
      "output_ports": [],
      "output_params": {
        "result": null,
        "success": false,
        "error_message": "",
        "execution_time": 0,
        "cached": false,
        "notion_object_id": "",
        "notion_object_type": ""
      },
      "attached_nodes": null,
      "configurations": {
        "mcp_server_url": "http://localhost:8000/api/v1/mcp",
        "notion_integration_token": "ntn_Y29841984278cT45JYtg0JKVUGiJ4m8Yas96xNCmvuI43v",
        "default_database_id": "27c0b1df-411b-81fa-ac40-ca8f7b697a0b",
        "available_tools": [
          "notion_search",
          "notion_query_database",
          "notion_get_page",
          "notion_create_database_item",
          "notion_update_database_item"
        ],
        "page_size_limit": 50,
        "enable_rich_text": true,
        "auto_create_missing_props": false
      }
    },
    {
      "id": "ai_agent",
      "name": "PersonalProductivityAI",
      "type": "AI_AGENT",
      "subtype": "ANTHROPIC_CLAUDE",
      "position": {
        "x": 450,
        "y": 200
      },
      "description": "Claude AI agent for intelligent task and project management with Notion integration",
      "input_ports": [
        {
          "id": "main",
          "name": "main",
          "data_type": "dict",
          "description": "Main input with user prompt and context",
          "required": true,
          "max_connections": -1
        },
        {
          "id": "context",
          "name": "context",
          "data_type": "dict",
          "description": "Additional context and variables",
          "required": false,
          "max_connections": -1
        }
      ],
      "input_params": {
        "user_input": "",
        "context": {},
        "variables": {},
        "images": [],
        "documents": []
      },
      "output_ports": [
        {
          "id": "response",
          "name": "response",
          "data_type": "dict",
          "description": "Claude's response and metadata",
          "required": true,
          "max_connections": -1
        },
        {
          "id": "structured_data",
          "name": "structured_data",
          "data_type": "dict",
          "description": "Extracted structured data from response",
          "required": false,
          "max_connections": -1
        },
        {
          "id": "error",
          "name": "error",
          "data_type": "dict",
          "description": "Error information if processing fails",
          "required": false,
          "max_connections": -1
        }
      ],
      "output_params": {
        "response": "",
        "thinking_process": "",
        "confidence_score": 0.0,
        "token_usage": {},
        "processing_time": 0.0,
        "function_calls": [],
        "extracted_data": {},
        "safety_flags": {},
        "model_version": "",
        "request_id": ""
      },
      "attached_nodes": ["working_memory", "notion_tool"],
      "configurations": {
        "anthropic_api_key": "your-anthropic-api-key",
        "model": "claude-sonnet-4-20250514",
        "system_prompt": "You are an expert personal productivity assistant that manages tasks and projects through Notion integration. You have access to a comprehensive Projects & Tasks workspace.\n\n## üóÑÔ∏è NOTION DATABASE STRUCTURE\n\n### Projects Database (ID: 27c0b1df-411b-81ae-a720-db1a0efa0a22)\n**Properties:**\n- **Project name** (title): Main project title\n- **Owner** (people): Project owner/lead\n- **Status** (status): Planning, In Progress, Paused, Backlog, Done, Canceled\n- **Priority** (select): Low, Medium, High\n- **Dates** (date): Project start/end dates\n- **Summary** (rich_text): Project description and goals\n- **Tasks** (relation): Linked tasks from Tasks database\n- **Completion** (rollup): Auto-calculated completion percentage from tasks\n- **Is Blocking** (relation): Projects this blocks\n- **Blocked By** (relation): Projects blocking this one\n- **Sign off project?** (button): Project completion button\n\n### Tasks Database (ID: 27c0b1df-411b-81fa-ac40-ca8f7b697a0b)\n**Properties:**\n- **Task name** (title): Task description\n- **Status** (status): Not Started, In Progress, Done, Archived\n- **Priority** (select): Low, Medium, High\n- **Due** (date): Due date\n- **Assignee** (people): Person responsible\n- **Tags** (multi_select): Mobile, Website, Improvement, Marketing, Research, Branding, Video production, Metrics\n- **Project** (relation): Linked to Projects database\n- **Sub-tasks** (relation): Child tasks\n- **Parent-task** (relation): Parent task\n- **Completed on** (date): Completion date\n- **Delay** (formula): Calculated delay in days\n\n## üéØ CORE RESPONSIBILITIES\n1. **Smart Task Management**: Create, prioritize, and track tasks with intelligent suggestions\n2. **Project Orchestration**: Break down projects into actionable tasks with dependencies\n3. **Daily Planning**: Provide personalized daily briefings and schedule optimization\n4. **Context Awareness**: Remember user preferences, project history, and work patterns\n5. **Proactive Assistance**: Suggest improvements, flag risks, identify bottlenecks\n\n## üõ†Ô∏è AVAILABLE TOOLS\n- **Notion Query Tool**: Search, query, and analyze existing projects/tasks\n- **Working Memory**: Store conversation context, user preferences, project insights\n\n## üìä RESPONSE FORMAT\nYour responses MUST be structured JSON with these exact sections:\n\n```json\n{\n  \"user_message\": \"Natural language response to the user\",\n  \"notion_actions\": [\n    {\n      \"action_type\": \"create_database_entry|update_database_entry|query_database|create_page|update_page\",\n      \"database_id\": \"27c0b1df-411b-81ae-a720-db1a0efa0a22|27c0b1df-411b-81fa-ac40-ca8f7b697a0b\",\n      \"entry_id\": \"existing_page_id_if_updating\",\n      \"properties\": {\n        \"Property Name\": {\"value\": \"formatted_according_to_notion_api\"}\n      },\n      \"reason\": \"Why this action is needed\",\n      \"priority\": 1\n    }\n  ],\n  \"slack_response\": {\n    \"message\": \"Slack message text with relevant details and emojis\",\n    \"format\": \"text|blocks\",\n    \"blocks\": [],\n    \"thread_reply\": true/false,\n    \"include_summary\": true/false\n  },\n  \"memory_operations\": [\n    {\n      \"operation\": \"store|retrieve|update\",\n      \"key\": \"descriptive_memory_key\",\n      \"value\": {\"stored_data\": \"value\"},\n      \"importance\": 0.1-1.0,\n      \"tags\": [\"project\", \"task\", \"preference\", \"insight\"]\n    }\n  ],\n  \"analysis\": {\n    \"priority_insights\": [\"Key insights about user's priorities\"],\n    \"workload_assessment\": \"light|moderate|heavy|overloaded\",\n    \"suggestions\": [\"Proactive suggestions for optimization\"],\n    \"risks_identified\": [\"Potential issues or bottlenecks\"],\n    \"next_actions\": [\"Recommended next steps\"]\n  }\n}\n```\n\n## üîß NOTION API PROPERTY FORMATS\n\n### For Tasks Database:\n```json\n{\n  \"Task name\": {\n    \"title\": [{\"text\": {\"content\": \"Task description\"}}]\n  },\n  \"Status\": {\n    \"status\": {\"name\": \"Not Started|In Progress|Done|Archived\"}\n  },\n  \"Priority\": {\n    \"select\": {\"name\": \"Low|Medium|High\"}\n  },\n  \"Due\": {\n    \"date\": {\"start\": \"2025-01-30T09:00:00.000Z\"}\n  },\n  \"Assignee\": {\n    \"people\": [{\"id\": \"user_id\"}]\n  },\n  \"Tags\": {\n    \"multi_select\": [{\"name\": \"Website\"}, {\"name\": \"Mobile\"}]\n  },\n  \"Project\": {\n    \"relation\": [{\"id\": \"project_page_id\"}]\n  }\n}\n```\n\n### For Projects Database:\n```json\n{\n  \"Project name\": {\n    \"title\": [{\"text\": {\"content\": \"Project title\"}}]\n  },\n  \"Status\": {\n    \"status\": {\"name\": \"Planning|In Progress|Paused|Backlog|Done|Canceled\"}\n  },\n  \"Priority\": {\n    \"select\": {\"name\": \"Low|Medium|High\"}\n  },\n  \"Dates\": {\n    \"date\": {\"start\": \"2025-01-01\", \"end\": \"2025-03-31\"}\n  },\n  \"Owner\": {\n    \"people\": [{\"id\": \"user_id\"}]\n  },\n  \"Summary\": {\n    \"rich_text\": [{\"text\": {\"content\": \"Project description\"}}]\n  }\n}\n```\n\n## üé≠ BEHAVIOR MODES\n\n### Morning Briefing (CRON Trigger)\n- Query overdue and due-today tasks\n- Analyze project progress and bottlenecks\n- Suggest daily priorities and schedule optimization\n- Provide motivational insights and progress celebration\n\n### Interactive Chat (Slack Mention)\n- Respond conversationally while performing actions\n- Ask clarifying questions when needed\n- Provide immediate feedback on task/project updates\n- Suggest related tasks or improvements\n\n### Memory Management\n- Store user work patterns and preferences\n- Remember project contexts and relationships\n- Track recurring themes and optimization opportunities\n- Maintain conversation continuity across sessions\n\n## üéØ KEY BEHAVIORS\n1. **Be Proactive**: Always suggest improvements and optimizations\n2. **Stay Organized**: Maintain clean project hierarchies and dependencies\n3. **Think Holistically**: Consider project relationships and impacts\n4. **Be Encouraging**: Celebrate progress and provide positive reinforcement\n5. **Stay Focused**: Help users prioritize high-impact work\n6. **Learn Continuously**: Adapt suggestions based on user feedback and patterns\n\nAlways maintain a helpful, professional tone while being efficient and actionable. Focus on getting things done and helping users achieve their goals.",
        "user_prompt": "{{user_input}}\n\nContext: {{context}}\nCurrent time: {{trigger_time}}\nTrigger type: {{trigger_type}}\n\nPlease analyze the request and provide structured assistance following your system guidelines.",
        "max_tokens": 81920,
        "temperature": 0.3,
        "top_p": 0.9,
        "response_format": "json",
        "thinking_mode": true,
        "output_processing": {
          "parse_json": true,
          "validate_output": true,
          "extract_code": false,
          "output_schema": {
            "type": "object",
            "properties": {
              "user_message": { "type": "string" },
              "notion_actions": { "type": "array" },
              "slack_response": { "type": "object" },
              "memory_operations": { "type": "array" },
              "analysis": { "type": "object" }
            },
            "required": ["user_message", "slack_response"]
          }
        }
      }
    },
    {
      "id": "notion_tasks_action",
      "name": "NotionTasksManager",
      "type": "EXTERNAL_ACTION",
      "subtype": "NOTION",
      "position": {
        "x": 750,
        "y": 100
      },
      "description": "Manages Notion Tasks database operations",
      "input_ports": [
        {
          "id": "main",
          "name": "main",
          "data_type": "dict",
          "description": "Input data for Notion tasks action",
          "required": true,
          "max_connections": 1
        }
      ],
      "input_params": {
        "data": {},
        "context": {},
        "variables": {}
      },
      "output_ports": [
        {
          "id": "success",
          "name": "success",
          "data_type": "dict",
          "description": "Output when Notion action succeeds",
          "required": true,
          "max_connections": -1
        },
        {
          "id": "error",
          "name": "error",
          "data_type": "dict",
          "description": "Output when Notion action fails",
          "required": false,
          "max_connections": -1
        }
      ],
      "output_params": {
        "success": false,
        "notion_response": {},
        "resource_id": "",
        "resource_url": "",
        "error_message": "",
        "rate_limit_info": {},
        "execution_metadata": {}
      },
      "attached_nodes": null,
      "configurations": {
        "notion_token": "ntn_Y29841984278cT45JYtg0JKVUGiJ4m8Yas96xNCmvuI43v",
        "action_type": "create_database_entry",
        "database_config": {
          "database_id": "27c0b1df-411b-81fa-ac40-ca8f7b697a0b",
          "title": "Tasks",
          "description": "Personal task management database",
          "properties": {
            "Task name": "title",
            "Status": "status",
            "Priority": "select",
            "Due": "date",
            "Assignee": "people",
            "Tags": "multi_select",
            "Project": "relation"
          },
          "parent": {}
        },
        "page_config": {
          "parent": { "database_id": "27c0b1df-411b-81fa-ac40-ca8f7b697a0b" },
          "properties": {},
          "children": [],
          "icon": {},
          "cover": {}
        },
        "query_config": {
          "filter": {},
          "sorts": [
            { "property": "Due", "direction": "ascending" },
            { "property": "Priority", "direction": "descending" }
          ],
          "start_cursor": "",
          "page_size": 100
        },
        "formatting_options": {
          "enable_markdown": true,
          "preserve_formatting": true,
          "auto_link_detection": true
        },
        "retry_config": {
          "max_retries": 3,
          "retry_delay": 1,
          "exponential_backoff": true,
          "handle_rate_limits": true
        }
      }
    },
    {
      "id": "notion_projects_action",
      "name": "NotionProjectsManager",
      "type": "EXTERNAL_ACTION",
      "subtype": "NOTION",
      "position": {
        "x": 750,
        "y": 200
      },
      "description": "Manages Notion Projects database operations",
      "input_ports": [
        {
          "id": "main",
          "name": "main",
          "data_type": "dict",
          "description": "Input data for Notion projects action",
          "required": true,
          "max_connections": 1
        }
      ],
      "input_params": {
        "data": {},
        "context": {},
        "variables": {}
      },
      "output_ports": [
        {
          "id": "success",
          "name": "success",
          "data_type": "dict",
          "description": "Output when Notion action succeeds",
          "required": true,
          "max_connections": -1
        },
        {
          "id": "error",
          "name": "error",
          "data_type": "dict",
          "description": "Output when Notion action fails",
          "required": false,
          "max_connections": -1
        }
      ],
      "output_params": {
        "success": false,
        "notion_response": {},
        "resource_id": "",
        "resource_url": "",
        "error_message": "",
        "rate_limit_info": {},
        "execution_metadata": {}
      },
      "attached_nodes": null,
      "configurations": {
        "notion_token": "ntn_Y29841984278cT45JYtg0JKVUGiJ4m8Yas96xNCmvuI43v",
        "action_type": "update_page",
        "database_config": {
          "database_id": "27c0b1df-411b-81ae-a720-db1a0efa0a22",
          "title": "Projects",
          "description": "Personal project management database"
        },
        "page_config": {
          "parent": { "database_id": "27c0b1df-411b-81ae-a720-db1a0efa0a22" },
          "properties": {},
          "children": [],
          "icon": {},
          "cover": {}
        },
        "query_config": {
          "filter": {},
          "sorts": [
            { "property": "Priority", "direction": "descending" },
            { "property": "Dates", "direction": "ascending" }
          ],
          "start_cursor": "",
          "page_size": 100
        },
        "formatting_options": {
          "enable_markdown": true,
          "preserve_formatting": true,
          "auto_link_detection": true
        },
        "retry_config": {
          "max_retries": 3,
          "retry_delay": 1,
          "exponential_backoff": true,
          "handle_rate_limits": true
        }
      }
    },
    {
      "id": "slack_action",
      "name": "SlackResponder",
      "type": "EXTERNAL_ACTION",
      "subtype": "SLACK",
      "position": {
        "x": 750,
        "y": 300
      },
      "description": "Sends rich responses and updates to Slack channels",
      "input_ports": [
        {
          "id": "main",
          "name": "main",
          "data_type": "dict",
          "description": "Message content and Slack operation parameters",
          "required": true,
          "max_connections": 1
        }
      ],
      "input_params": {
        "message": "",
        "blocks": [],
        "attachments": [],
        "channel_override": "",
        "user_mentions": [],
        "metadata": {}
      },
      "output_ports": [
        {
          "id": "main",
          "name": "main",
          "data_type": "dict",
          "description": "Slack operation result and response data",
          "required": false,
          "max_connections": -1
        },
        {
          "id": "error",
          "name": "error",
          "data_type": "dict",
          "description": "Error output when Slack operation fails",
          "required": false,
          "max_connections": -1
        }
      ],
      "output_params": {
        "success": false,
        "message_ts": "",
        "channel_id": "",
        "response_data": {},
        "error_message": "",
        "api_response": {}
      },
      "attached_nodes": null,
      "configurations": {
        "action_type": "send_message",
        "channel": "#assistant",
        "bot_token": "xoxb-your-bot-token",
        "use_oauth": true,
        "message_format": "blocks",
        "thread_ts": "",
        "unfurl_links": true,
        "unfurl_media": false
      }
    }
  ],
  "metadata": {
    "id": "comprehensive-personal-assistant-v3",
    "name": "Comprehensive Personal Assistant & Project Manager",
    "tags": [
      "productivity",
      "personal",
      "notion",
      "slack",
      "ai-assistant",
      "project-management",
      "tasks"
    ],
    "version": "3.0",
    "icon_url": "ü§ñ",
    "created_by": "17368e0c-106f-4e69-8520-11ed0df91fb4",
    "statistics": {
      "total_runs": 0,
      "total_credits": 0,
      "last_success_time": null,
      "average_duration_ms": 0
    },
    "updated_by": null,
    "description": "Advanced personal assistant workflow with comprehensive Notion integration for managing Projects & Tasks databases. Features intelligent task management, project orchestration, daily planning, and proactive assistance with real-time Slack interactions.",
    "created_time": 1738166400000,
    "parent_workflow": null,
    "deployment_status": "pending",
    "last_execution_time": null,
    "last_execution_status": null
  },
  "triggers": ["cron_trigger", "slack_trigger"],
  "connections": [
    {
      "id": "conn_cron_to_ai",
      "to_node": "ai_agent",
      "to_port": "main",
      "from_node": "cron_trigger",
      "from_port": "main",
      "conversion_function": "def convert(input_data: Dict[str, Any]) -> Dict[str, Any]:\n    return {\n        'user_input': f'Good morning! Please provide my daily briefing for {input_data.get(\"trigger_time\", \"today\")}. Include overdue tasks, today\\'s priorities, project updates, and suggestions for optimization.',\n        'context': {\n            'trigger_type': 'morning_briefing',\n            'trigger_time': input_data.get('trigger_time'),\n            'execution_id': input_data.get('execution_id'),\n            'timezone': input_data.get('timezone', 'UTC'),\n            'request_type': 'daily_briefing',\n            'cron_expression': input_data.get('cron_expression'),\n            'automated': True\n        }\n    }"
    },
    {
      "id": "conn_slack_to_ai",
      "to_node": "ai_agent",
      "to_port": "main",
      "from_node": "slack_trigger",
      "from_port": "main",
      "conversion_function": "def convert(input_data: Dict[str, Any]) -> Dict[str, Any]:\n    return {\n        'user_input': input_data.get('message_text', '').replace('<@U0123456789>', '').strip(),\n        'context': {\n            'trigger_type': 'slack_mention',\n            'user_id': input_data.get('user_id'),\n            'user_name': input_data.get('user_name'),\n            'channel_id': input_data.get('channel_id'),\n            'channel_name': input_data.get('channel_name'),\n            'thread_ts': input_data.get('thread_ts'),\n            'trigger_time': input_data.get('trigger_time'),\n            'execution_id': input_data.get('execution_id'),\n            'slack_payload': input_data.get('slack_payload', {}),\n            'automated': False,\n            'original_message': input_data.get('message_text', '')\n        }\n    }"
    },
    {
      "id": "conn_ai_to_tasks",
      "to_node": "notion_tasks_action",
      "to_port": "main",
      "from_node": "ai_agent",
      "from_port": "structured_data",
      "conversion_function": "def convert(input_data: Dict[str, Any]) -> Dict[str, Any]:\n    ai_response = input_data.get('extracted_data', {})\n    notion_actions = ai_response.get('notion_actions', [])\n    \n    # Find task-related actions\n    task_actions = [action for action in notion_actions \n                   if action.get('database_id') == '27c0b1df-411b-81fa-ac40-ca8f7b697a0b']\n    \n    if not task_actions:\n        return {'skip_execution': True}\n    \n    # Process the highest priority task action\n    task_action = sorted(task_actions, key=lambda x: x.get('priority', 999))[0]\n    action_type = task_action.get('action_type', 'create_database_entry')\n    \n    result = {\n        'data': {\n            'action_type': action_type,\n            'database_id': '27c0b1df-411b-81fa-ac40-ca8f7b697a0b',\n            'entry_id': task_action.get('entry_id'),\n            'properties': task_action.get('properties', {})\n        },\n        'context': {\n            'ai_reasoning': task_action.get('reason', ''),\n            'action_priority': task_action.get('priority', 1),\n            'total_actions': len(notion_actions),\n            'source': 'ai_agent_task_management'\n        }\n    }\n    \n    return result"
    },
    {
      "id": "conn_ai_to_projects",
      "to_node": "notion_projects_action",
      "to_port": "main",
      "from_node": "ai_agent",
      "from_port": "structured_data",
      "conversion_function": "def convert(input_data: Dict[str, Any]) -> Dict[str, Any]:\n    ai_response = input_data.get('extracted_data', {})\n    notion_actions = ai_response.get('notion_actions', [])\n    \n    # Find project-related actions\n    project_actions = [action for action in notion_actions \n                      if action.get('database_id') == '27c0b1df-411b-81ae-a720-db1a0efa0a22']\n    \n    if not project_actions:\n        return {'skip_execution': True}\n    \n    # Process the highest priority project action\n    project_action = sorted(project_actions, key=lambda x: x.get('priority', 999))[0]\n    action_type = project_action.get('action_type', 'create_database_entry')\n    \n    result = {\n        'data': {\n            'action_type': action_type,\n            'database_id': '27c0b1df-411b-81ae-a720-db1a0efa0a22',\n            'entry_id': project_action.get('entry_id'),\n            'properties': project_action.get('properties', {})\n        },\n        'context': {\n            'ai_reasoning': project_action.get('reason', ''),\n            'action_priority': project_action.get('priority', 1),\n            'total_actions': len(notion_actions),\n            'source': 'ai_agent_project_management'\n        }\n    }\n    \n    return result"
    },
    {
      "id": "conn_ai_to_slack",
      "to_node": "slack_action",
      "to_port": "main",
      "from_node": "ai_agent",
      "from_port": "structured_data",
      "conversion_function": "def convert(input_data: Dict[str, Any]) -> Dict[str, Any]:\n    ai_response = input_data.get('extracted_data', {})\n    slack_response = ai_response.get('slack_response', {})\n    original_context = input_data.get('context', {})\n    \n    # Determine channel and thread settings\n    channel = original_context.get('channel_id', '#assistant')\n    thread_ts = original_context.get('thread_ts', '') if slack_response.get('thread_reply', False) else ''\n    \n    message_format = slack_response.get('format', 'text')\n    message_text = slack_response.get('message', 'Task completed successfully! ‚úÖ')\n    \n    # Add analysis summary if requested\n    analysis = ai_response.get('analysis', {})\n    if slack_response.get('include_summary', False) and analysis:\n        workload = analysis.get('workload_assessment', 'moderate')\n        insights = analysis.get('priority_insights', [])\n        suggestions = analysis.get('suggestions', [])\n        \n        summary_text = f\"\\n\\nüìä **Quick Summary**\\n‚Ä¢ Workload: {workload.title()}\\n\"\n        if insights:\n            summary_text += f\"‚Ä¢ Key insight: {insights[0]}\\n\"\n        if suggestions:\n            summary_text += f\"‚Ä¢ Suggestion: {suggestions[0]}\"\n        \n        message_text += summary_text\n    \n    result = {\n        'message': message_text,\n        'channel_override': channel,\n        'metadata': {\n            'source': 'ai_productivity_assistant',\n            'trigger_type': original_context.get('trigger_type', 'unknown'),\n            'execution_id': original_context.get('execution_id', ''),\n            'user_id': original_context.get('user_id', ''),\n            'automated': original_context.get('automated', False)\n        }\n    }\n    \n    # Add rich blocks if format is blocks\n    if message_format == 'blocks' and slack_response.get('blocks'):\n        result['blocks'] = slack_response.get('blocks', [])\n    \n    # Add thread timestamp if replying to thread\n    if thread_ts:\n        result['thread_ts'] = thread_ts\n    \n    return result"
    }
  ]
}
