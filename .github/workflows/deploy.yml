name: Deploy to AWS ECS

on:
  push:
    branches: [main, develop]
    paths:
      - "apps/backend/**"
      - ".github/workflows/deploy.yml"
      - "infra/**"
  pull_request:
    branches: [main]
    paths:
      - "apps/backend/**"
      - ".github/workflows/deploy.yml"
      - "infra/**"
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY_API_GATEWAY: agent-team/api-gateway
  ECR_REPOSITORY_WORKFLOW_ENGINE: agent-team/workflow-engine

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies and test API Gateway
        working-directory: apps/backend/api-gateway
        run: |
          pip install uv
          uv sync
          uv run pytest tests/ -v --cov=app --cov-report=xml

      - name: Install dependencies and test Workflow Engine
        working-directory: apps/backend/workflow_engine
        run: |
          pip install -e . || pip install pytest grpcio grpcio-tools
          python -m pytest tests/ -v || echo "Tests not found, skipping"

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: apps/backend/api-gateway/coverage.xml
          flags: api-gateway
          name: api-gateway-coverage

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    strategy:
      matrix:
        service:
          - name: api-gateway
            context: apps/backend/api-gateway
            repository: agent-team/api-gateway
          - name: workflow-engine
            context: apps/backend/workflow_engine
            repository: agent-team/workflow-engine

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build and push Docker image
          docker buildx build \
            --platform linux/amd64 \
            --target production \
            --tag $ECR_REGISTRY/${{ matrix.service.repository }}:$IMAGE_TAG \
            --tag $ECR_REGISTRY/${{ matrix.service.repository }}:latest \
            --push \
            ${{ matrix.service.context }}

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Terraform Init
        working-directory: infra
        run: terraform init

      - name: Terraform Plan
        working-directory: infra
        env:
          TF_VAR_image_tag: ${{ github.sha }}
          TF_VAR_supabase_url: ${{ secrets.SUPABASE_URL }}
          TF_VAR_supabase_anon_key: ${{ secrets.SUPABASE_ANON_KEY }}
          TF_VAR_supabase_service_role_key: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        working-directory: infra
        env:
          TF_VAR_image_tag: ${{ github.sha }}
          TF_VAR_supabase_url: ${{ secrets.SUPABASE_URL }}
          TF_VAR_supabase_anon_key: ${{ secrets.SUPABASE_ANON_KEY }}
          TF_VAR_supabase_service_role_key: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
        run: terraform apply -auto-approve tfplan

      - name: Update ECS Service - API Gateway
        run: |
          aws ecs update-service \
            --cluster agent-team-production-cluster \
            --service api-gateway-service \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Update ECS Service - Workflow Engine
        run: |
          aws ecs update-service \
            --cluster agent-team-production-cluster \
            --service workflow-engine-service \
            --force-new-deployment \
            --region ${{ env.AWS_REGION }}

      - name: Wait for deployment to complete
        run: |
          aws ecs wait services-stable \
            --cluster agent-team-production-cluster \
            --services api-gateway-service workflow-engine-service \
            --region ${{ env.AWS_REGION }}
