{"id":"5292c189-c2da-429c-afad-10cf42273af4","execution_id":"a8f72510-eec5-41cc-b66d-187e668d3e64","workflow_id":"bf4a6d74-f557-4f33-b2ff-e104fc2ecaea","status":"ERROR","mode":"MANUAL","triggered_by":"7ba36345-a2bb-4ec9-a001-bb46d79d629d","start_time":1757161912,"end_time":1757162050,"run_data":{"node_results":{"ai_onboarding":{"logs":["Executing OpenAI GPT agent","Error storing conversation in memory: 'AIAgentNodeExecutor' object has no attribute '_get_connected_memory_nodes'","AI agent completed: OPENAI_CHATGPT"],"status":"SUCCESS","node_type":"AI_AGENT","output_data":{"content":"Manual trigger received.\n\nIf you want me to run the onboarding workflow now, here’s what I will do and what I need from you.\n\nWhat I will do when triggered\n- Collect team information you provide (members, roles, emails).\n- Initialize Notion databases/pages for the team (create team database, People pages for each member, onboarding template pages).\n- Post onboarding messages/responses to Slack (welcome messages, links to Notion pages, next steps).\n- Report back with a summary of created Notion pages and posted Slack messages (IDs/links).\n\nRequired inputs / permissions\n- Team name.\n- Team members: name, email, role, start date (for each member).\n- Notion: integration token (or invite the integration to the target workspace), parent page or workspace ID where DBs should be created, names of any templates to use or confirmation to use default template.\n- Slack: bot token (or invite the app to workspace), target channel(s) (e.g., #onboarding or direct messages), confirmation of which message template to send (I can use a default if you prefer).\n- Timezone for scheduling any timed posts.\n- Confirmation whether to create separate Notion pages for each member and whether to assign initial tasks.\n\nPermissions note\n- I need a Notion integration with write access to the specified parent page and ability to create databases/pages.\n- I need a Slack bot token with permission to post to the target channels or send DMs.\n\nOptions / extras\n- Dry run first (no writes, just show what would be created).\n- Customizable Slack message template; provide text or confirm use of defaults.\n- Add initial task assignments or links to company policies.\n\nNext step\n- Reply with the required inputs above and whether you want a dry run or to execute now. If everything’s already set (tokens and IDs provided), say “Run now” and I’ll proceed.","metadata":{"model":"gpt-5-mini","provider":"openai","input_text":"Triggered by manual event","max_tokens":2048,"executed_at":"2025-09-06T12:33:03.936534","temperature":1.0,"system_prompt":"You collect team information, initialize Notion databases, and post onboarding responses to Slack.","presence_penalty":0.0,"frequency_penalty":0.0,"conversation_messages_count":0},"timestamp":"2025-09-06T12:33:03.936544","format_type":"text","source_node":"ai_onboarding"},"node_subtype":"OPENAI_CHATGPT","error_message":null,"execution_time":10.82474946975708},"ai_data_processor":{"logs":["Executing OpenAI GPT agent","AI agent completed: OPENAI_CHATGPT"],"status":"SUCCESS","node_type":"AI_AGENT","output_data":{"content":"Hi — I didn’t get any details. How can I help with your analytics/reporting work? A few things I can do right away:\n\n- Clean and prepare raw event or transaction data\n- Compute KPIs (DAU/MAU, conversion rate, retention, churn, ARPU, LTV, bounce rate)\n- Build cohort or funnel analyses and detect anomalies\n- Produce charts and tables for a report (static images, CSV/Excel, or code to generate)\n- Write SQL queries or Python/R scripts to reproduce metrics\n- Design dashboards or an automated reporting pipeline\n\nIf you want me to start, please provide:\n1. Data access or a sample file (CSV/Excel) or schema (key fields)  \n2. Goal(s) and key metrics you care about (e.g., conversion rate, revenue, retention)  \n3. Timeframe and segmentation (date range, country, device, channel)  \n4. Desired output format (executive summary, slide-ready charts, CSV/Excel, SQL/Python code)  \n5. Any benchmarks, targets, or constraints (business rules, definitions)  \n6. Deadline or urgency\n\nIf you’re not sure, tell me one high-level question you want answered (e.g., “Why did revenue drop in July?” or “Which channel has the best LTV?”) and I’ll suggest the next steps and what I need.\n\nWhich of the above would you like to do now?","metadata":{"model":"gpt-5-mini","provider":"openai","input_text":"","max_tokens":2048,"executed_at":"2025-09-06T12:33:51.661497","temperature":1.0,"system_prompt":"You process analytics metrics and prepare data for report generation.","presence_penalty":0.0,"frequency_penalty":0.0,"conversation_messages_count":0},"timestamp":"2025-09-06T12:33:51.661515","format_type":"text","source_node":"ai_data_processor"},"node_subtype":"OPENAI_CHATGPT","error_message":null,"execution_time":8.598151683807373},"ai_task_management":{"logs":["Executing OpenAI GPT agent","Error storing conversation in memory: 'AIAgentNodeExecutor' object has no attribute '_get_connected_memory_nodes'","AI agent completed: OPENAI_CHATGPT"],"status":"SUCCESS","node_type":"AI_AGENT","output_data":{"content":"Got it — I see a Slack event triggered this flow. I don’t yet have the event payload or Notion context, so I can’t create tasks yet. Please provide one of the following so I can extract action items and create Notion tasks:\n\nRequired:\n- Slack event content (message text or full event JSON), plus channel and sender (or a link to the Slack message).\n\nOptional but helpful:\n- Notion workspace / database name to create tasks in (or confirm I can use the default “Inbox” / “Tasks” database).\n- Any mapping preferences (how to map Slack usernames to Notion assignees).\n- Priority mapping rules (e.g., messages containing “ASAP” = High, “by EOD/today” = Urgent). Default mapping I’ll use if you don’t specify: “urgent/ASAP/today” → High, “this week/next week” → Medium, otherwise Low.\n- Default due date rule (default: 3 business days from creation) or a preferred default.\n\nIf you want, I can proceed immediately with sensible defaults:\n- Create task in “Inbox” / Tasks DB\n- Title: first line of Slack message (or truncated)\n- Description: full Slack message + link to message\n- Assignee: Slack message author mapped to Notion user (or leave unassigned if no match)\n- Priority: inferred (see defaults above)\n- Due: 3 business days from now\n- Tags: Slack, channel-name\n\nReply with the Slack message (or say “use defaults” and give DB name) and I’ll extract action items and create/assign the tasks.","metadata":{"model":"gpt-5-mini","provider":"openai","input_text":"Triggered by slack event","max_tokens":2048,"executed_at":"2025-09-06T12:34:08.101837","temperature":1.0,"system_prompt":"You are a task management AI. Create and assign tasks based on extracted action items from messages. Use context from Notion data for assignments and priorities.","presence_penalty":0.0,"frequency_penalty":0.0,"conversation_messages_count":0},"timestamp":"2025-09-06T12:34:08.101849","format_type":"text","source_node":"ai_task_management"},"node_subtype":"OPENAI_CHATGPT","error_message":null,"execution_time":12.875598192214966},"ai_analytics_engine":{"logs":["Executing OpenAI GPT agent","AI agent completed: OPENAI_CHATGPT"],"status":"SUCCESS","node_type":"AI_AGENT","output_data":{"content":"","metadata":{"model":"gpt-5-mini","provider":"openai","input_text":"Triggered by github event","max_tokens":2048,"executed_at":"2025-09-06T12:32:53.111427","temperature":1.0,"system_prompt":"You process GitHub development data, analyze metrics, and generate reports for project insights.","presence_penalty":0.0,"frequency_penalty":0.0,"conversation_messages_count":0},"timestamp":"2025-09-06T12:32:53.111442","format_type":"text","source_node":"ai_analytics_engine"},"node_subtype":"OPENAI_CHATGPT","error_message":null,"execution_time":18.75759744644165},"ai_sync_facilitator":{"logs":["Executing OpenAI GPT agent","Error storing conversation in memory: 'AIAgentNodeExecutor' object has no attribute '_get_connected_memory_nodes'","AI agent completed: OPENAI_CHATGPT"],"status":"SUCCESS","node_type":"AI_AGENT","output_data":{"content":"Thanks — no sync was triggered now.\n\nSummary of current schedule\n- Cron: \"0 14 * * 3\" → every Wednesday at 14:00 UTC.\n- Current time: 2025-09-06T12:31:53.934712 UTC (checked).\n- should_trigger: false — no Wednesday meeting ran at this check.\n- Next scheduled run: 2025-09-10T14:00:00 UTC.\n\nWould you like me to take any of the following in advance of the next Wednesday sync?\n- Create a Notion meeting page (template: agenda, notes, decisions, action items).\n- Post a Slack reminder/announcement to a specific channel and ping attendees at a chosen time (e.g., 24h and 30m before).\n- Collect agenda items from the team via a short Slack thread or form.\n- Send calendar invites or update attendees list.\n- Run an ad-hoc sync now and record summary & action items.\n\nIf yes, tell me:\n- Slack channel and attendees to notify.\n- Notion workspace/page where to create the meeting note (or I can create a new page and share link).\n- Any prefilled agenda items or time for reminders.\n- Whether to change the cron schedule or timezone.\n\nSuggested meeting agenda (I can use this template unless you prefer different):\n1. Quick round — 2–3 min per person: progress since last sync\n2. Blockers & help needed\n3. Decisions required\n4. Action items & owners\n5. Quick demo / highlights (optional)\n\nWhat should I do next?","metadata":{"model":"gpt-5-mini","provider":"openai","input_text":"{\n  \"trigger_type\": \"cron\",\n  \"cron_expression\": \"0 14 * * 3\",\n  \"timezone\": \"UTC\",\n  \"current_time\": \"2025-09-06T12:31:53.934712\",\n  \"next_run\": \"2025-09-10T14:00:00\",\n  \"should_trigger\": false,\n  \"triggered_at\": \"2025-09-06T12:31:53.934851\"\n}","max_tokens":2048,"executed_at":"2025-09-06T12:32:34.353487","temperature":1.0,"system_prompt":"You facilitate Wednesday progress discussions. Manage sync meetings, summarize outcomes, and update Slack and Notion accordingly.","presence_penalty":0.0,"frequency_penalty":0.0,"conversation_messages_count":0},"timestamp":"2025-09-06T12:32:34.353497","format_type":"text","source_node":"ai_sync_facilitator"},"node_subtype":"OPENAI_CHATGPT","error_message":null,"execution_time":11.182138204574585},"ai_escalation_manager":{"logs":["Executing OpenAI GPT agent","Error storing conversation in memory: 'AIAgentNodeExecutor' object has no attribute '_get_connected_memory_nodes'","AI agent completed: OPENAI_CHATGPT"],"status":"SUCCESS","node_type":"AI_AGENT","output_data":{"content":"Got it — I can take care of prioritizing and routing. I need a little more info to proceed.\n\nWhat I need from you (pick one):\n1) Paste the Slack event payload or the message text here.  \n2) Or give me a short summary of the action item(s) with any of: reporter, timestamp, affected service, visible severity labels (e.g., P0/P1/SEV1), links, and desired assignee(s).\n\nAlso tell me:\n- Do you want me to auto-classify priority using the default rules below, or do you want to supply an explicit priority for this item?\n- Where should high-priority items be posted? (default: #incidents). If different, list channel name(s).\n- Notion details for normal items: Notion integration token and database/page ID (or confirm you want me to return a Notion-ready payload instead of actually writing).\n\nDefault priority rules I will use if you ask me to auto-classify:\n- High priority (route to public Slack channel immediately): outage/production down, data-loss, security breach, degraded critical service, customer-impacting P0/P1, explicit “SEV1/SEV2/P0/P1/urgent/ASAP”.\n- Normal priority (log to Notion): routine requests, follow-ups, documentation tasks, non-urgent bugs, feature work, anything clearly tagged P2+ or not customer-impacting.\n\nWhat I will do once you give me the event and permissions:\n- If high priority: post a concise notification into the configured public Slack channel(s) with summary, reporter, affected service, impact, links, and suggested next action + assignee.\n- If normal priority: create a Notion entry in the specified database with title, description, reporter, severity, links, and due date (if provided) or return a Notion-ready JSON if you don’t want me to write directly.\n\nExample of what I’ll post/create (I can adapt format if you prefer):\n- Title: [P0] API outage — auth service (reported by @alice)\n- Summary: Auth endpoint returning 500s for all regions since 14:03 UTC. Customers reporting login failures. Error logs indicate DB connection timeouts.\n- Action: Triage oncall, run restart, escalate to DB team if persists.\n- Links: Slack thread, error dashboard\n- Assignee: @oncall\n\nReply with the event/message or confirm defaults and provide integration details and I’ll handle classification and routing.","metadata":{"model":"gpt-5-mini","provider":"openai","input_text":"Triggered by slack event","max_tokens":2048,"executed_at":"2025-09-06T12:33:34.155440","temperature":1.0,"system_prompt":"You are an escalation manager. Check priority of action items and route high-priority items to public Slack channels or log normal priority items to Notion.","presence_penalty":0.0,"frequency_penalty":0.0,"conversation_messages_count":0},"timestamp":"2025-09-06T12:33:34.155458","format_type":"text","source_node":"ai_escalation_manager"},"node_subtype":"OPENAI_CHATGPT","error_message":null,"execution_time":13.848788499832153},"ai_status_aggregation":{"logs":["Executing OpenAI GPT agent","Error storing conversation in memory: 'AIAgentNodeExecutor' object has no attribute '_get_connected_memory_nodes'","AI agent completed: OPENAI_CHATGPT"],"status":"SUCCESS","node_type":"AI_AGENT","output_data":{"content":"Heads-up: your cron did not trigger this run (should_trigger: false). Next scheduled run is 2025-09-07T09:00:00 UTC. I can compile the standup now if you supply the team updates (or authorize an integration to fetch them). Below are ready-to-use templates and examples you can paste into Slack and Notion — plus a short checklist of the fields I need to produce a real aggregated update.\n\nWhat I need from you (one of these)\n- Paste the raw updates from team members (name + yesterday, today, blockers).\n- Or grant access to integrations (Jira/GitHub/Notion/Slack) and tell me which project/boards to pull.\n- Or say “compile now” and paste a short list of updates in free text and I’ll parse them.\n\nSlack message (concise, copy/paste)\n- @channel Daily Standup — 2025-09-06 (UTC)\n- Progress:\n  • Feature X: UI review complete; PR #422 merged.\n  • Payment integration: Sandbox tests passed.\n  • Docs: Onboarding doc draft ready for review.\n- Today:\n  • Alice — finish E2E for Feature X; start bug triage.\n  • Ben — implement retry logic for payment calls.\n  • Clara — incorporate review feedback into onboarding doc.\n- Blockers:\n  • Staging flaky on POST /orders — logs needed from infra.\n  • Dependency: analytics SDK v2.1 release needed for rollout.\n- Action items / Reminders:\n  • Devs: please re-run the failing E2E after infra pushes fix.\n  • Product: confirm go/no-go for Feature X by EOD.\n- Links: PR #422 | Jira board: [link] | Staging logs: [link]\n\nNotion update (detailed, paste into a page)\nTitle: Daily Standup — 2025-09-06 (UTC)\nDate: 2025-09-06\nAttendees: Alice, Ben, Clara, [others]\nSummary:\n- Completed:\n  - Feature X UI review and merge (PR #422).\n  - Payment integration sandbox tests successful.\n  - Onboarding doc initial draft.\n- In progress:\n  - E2E tests for Feature X (Alice).\n  - Retry logic for payment calls (Ben).\n  - Docs review and edits (Clara).\n- Blockers:\n  - Staging environment flaky on POST /orders — blocks E2E verification. (Assigned: Infra; logs requested)\n  - Waiting on analytics SDK v2.1 release for rollout.\n- Action Items:\n  1. Infra: investigate staging POST /orders failures; provide logs. Owner: Dave. Due: today.\n  2. Ben: finish retry logic and open PR. Owner: Ben. Due: 2025-09-07.\n  3. Product: decision on Feature X rollout. Owner: Erin. Due: EOD 2025-09-06.\n- Links & Artifacts:\n  - PR #422: [link]\n  - Jira board: [link]\n  - Staging logs: [link]\nNotes / Decisions: If staging is not stable by 10:00 UTC tomorrow, postpone the Feature X rollout and run a targeted hotfix branch.\n\nExample aggregated update (if you want me to auto-fill placeholders)\n- Alice — Yesterday: UI review done; Today: run E2E and fix flakies; Blocker: staging POST /orders failing.\n- Ben — Yesterday: started retry logic; Today: finish retry logic and tests; Blocker: none.\n- Clara — Yesterday: drafted onboarding doc; Today: apply review feedback; Blocker: waiting for screenshots.\n\nIf you want me to proceed now\n- Paste the raw updates or say “compile now” and include the bullet list of names + their yesterday/today/blockers.\n- Or tell me which integrations to use and I’ll fetch updates and produce the Slack + Notion content automatically.","metadata":{"model":"gpt-5-mini","provider":"openai","input_text":"{\n  \"trigger_type\": \"cron\",\n  \"cron_expression\": \"0 9 * * *\",\n  \"timezone\": \"UTC\",\n  \"current_time\": \"2025-09-06T12:31:53.933024\",\n  \"next_run\": \"2025-09-07T09:00:00\",\n  \"should_trigger\": false,\n  \"triggered_at\": \"2025-09-06T12:31:53.933822\"\n}","max_tokens":2048,"executed_at":"2025-09-06T12:32:23.171383","temperature":1.0,"system_prompt":"You aggregate team status updates for daily standups. Compile updates, summarize progress, and prepare messages for Slack and Notion updates.","presence_penalty":0.0,"frequency_penalty":0.0,"conversation_messages_count":0},"timestamp":"2025-09-06T12:32:23.171390","format_type":"text","source_node":"ai_status_aggregation"},"node_subtype":"OPENAI_CHATGPT","error_message":null,"execution_time":13.728180408477783},"trigger_slack_message":{"logs":[],"status":"SUCCESS","node_type":"TRIGGER","output_data":{"content":"Triggered by slack event","metadata":{"text":"","user":"","channel":"","slack_data":{},"trigger_type":"slack","triggered_at":"2025-09-06T12:31:53.932393","message_filter":"","event_timestamp":""},"timestamp":"2025-09-06T12:31:53.932397","format_type":"text","source_node":"trigger_slack_message"},"node_subtype":"SLACK","error_message":null,"execution_time":0.0004899501800537109},"ai_planning_facilitator":{"logs":["Executing OpenAI GPT agent","Error storing conversation in memory: 'AIAgentNodeExecutor' object has no attribute '_get_connected_memory_nodes'","AI agent completed: OPENAI_CHATGPT"],"status":"SUCCESS","node_type":"AI_AGENT","output_data":{"content":"Thanks — I see the cron check ran but did not trigger (should_trigger: false). Next scheduled run is 2025-09-07T10:00:00 UTC. When that runs I’ll perform the Sunday planning workflow unless you want me to run it manually now.\n\nBelow is the Sunday-planning checklist I’ll follow at the next scheduled run, what I can do automatically if integrations are connected, plus templates and an example plan you can approve or edit.\n\n1) What happened with the cron check\n- Status: did not trigger this run.\n- Next run: 2025-09-07 10:00:00 UTC.\n- Option: I can run the workflow now if you want — tell me “run now.”\n\n2) Sunday planning workflow (to run at the scheduled trigger)\n- Fetch last-week activity from your task manager:\n  - Completed tasks since last Sunday, tasks closed with notes, and open blockers.\n- Summarize outcomes and blockers in 3–5 bullet points.\n- Propose top 3 objectives for the coming week (with rationale).\n- Turn objectives into actionable tasks (title, brief description, owner, estimate, priority, due date).\n- Timeblock the week in your calendar (suggested slots) and create a 30–60 min Sunday planning event.\n- Post a short async planning update to your Slack channel (draft included below).\n- Create any follow-up tasks / reminders and assign owners.\n- If requested, open items are pushed to backlog with suggested priorities.\n\n3) Integrations I can use (I’ll act only if you’ve connected them)\n- Task manager: create/update tasks, mark dependencies (Asana, Trello, Todoist, Notion, Jira — tell me which).\n- Calendar: create the Sunday planning event and the timeblocked slots (Google Calendar, Outlook).\n- Slack: post the planning summary to a channel or DM an owner.\n\n4) Suggested Sunday planning agenda (45–60 minutes)\n- 00–10 min: Review last week — wins, misses, blockers.\n- 10–25 min: Identify and lock top 3 objectives for the week.\n- 25–35 min: Break top objectives into actionable tasks and estimate time.\n- 35–50 min: Timeblock tasks across the calendar, schedule meetings, set reminders.\n- 50–60 min: Post Slack summary and assign follow-ups.\n\n5) Example tasks to create (edit as needed)\n- Task: Finalize Feature X release\n  - Description: Finish implementation of feature X, QA pass, update release notes.\n  - Estimate: 8h\n  - Priority: High\n  - Due: Wed 2025-09-10\n  - Calendar: Block 4h Tue morning, 4h Wed morning\n- Task: Fix Bug #237 (critical)\n  - Description: Reproduce, patch, deploy hotfix, verify staging.\n  - Estimate: 3h\n  - Priority: High\n  - Due: Mon 2025-09-08\n  - Calendar: Block Mon 10:00–13:00 UTC\n- Task: Backlog grooming + prioritization\n  - Description: Review backlog items, assign priorities and owners.\n  - Estimate: 1.5h\n  - Priority: Medium\n  - Due: Tue 2025-09-09\n- Task: Stakeholder sync / roadmap review\n  - Description: 30-min meeting to align on priorities and dependencies.\n  - Estimate: 30m\n  - Priority: Medium\n  - Due: Thu 2025-09-11\n\n6) Slack message template (short team update)\n- Channel: #team-planning (or tell me which)\n- Message:\n  - \"Weekly planning: Quick summary of last week: [1–2 bullets]. Top priorities for this week: 1) [Feature X], 2) [Bug #237], 3) [Backlog grooming]. I’ve timeblocked work and created/assigned tasks — please review and flag any conflicts. If you need changes, reply here or DM me. — [Your Name]\"\n- Optionally ping specific owners for items that need input.\n\n7) What I need from you to fully automate\n- Which task manager do you use (Asana, Jira, Trello, Todoist, Notion, other)?\n- Calendar provider (Google Calendar / Outlook) and permission to create events.\n- Slack workspace and default channel for planning posts.\n- Preference for daily time zone for timeblocks (cron is in UTC; confirm if you prefer another timezone for calendar invites).\n\n8) Next steps / actions you can pick\n- A) Approve this workflow and tell me the integrations to connect; I’ll run automatically at next run and create tasks/calendar events/Slack post.\n- B) Ask me to run the workflow now (“run now”).\n- C) Edit the sample objectives/tasks above and I’ll use the edited version when I run.\n- D) If you want a different time for the Sunday planning cron, tell me the new UTC time.\n\nWould you like me to run the plan now or configure integrations for automatic execution at the next scheduled run? If integrations aren’t connected, tell me which platforms to integrate and I’ll guide you through connecting them.","metadata":{"model":"gpt-5-mini","provider":"openai","input_text":"{\n  \"trigger_type\": \"cron\",\n  \"cron_expression\": \"0 10 * * 0\",\n  \"timezone\": \"UTC\",\n  \"current_time\": \"2025-09-06T12:31:53.936805\",\n  \"next_run\": \"2025-09-07T10:00:00\",\n  \"should_trigger\": false,\n  \"triggered_at\": \"2025-09-06T12:31:53.936944\"\n}","max_tokens":2048,"executed_at":"2025-09-06T12:33:20.304488","temperature":1.0,"system_prompt":"You review past work and plan upcoming tasks for Sunday planning. Connect with task management, Slack responder, and calendar integration for scheduling.","presence_penalty":0.0,"frequency_penalty":0.0,"conversation_messages_count":0},"timestamp":"2025-09-06T12:33:20.304625","format_type":"text","source_node":"ai_planning_facilitator"},"node_subtype":"OPENAI_CHATGPT","error_message":null,"execution_time":16.369566679000854},"trigger_github_activity":{"logs":[],"status":"SUCCESS","node_type":"TRIGGER","output_data":{"content":"Triggered by github event","metadata":{"event":"","action":"","sender":{},"repository":"example_org/example_repo","github_data":{},"event_filter":"","trigger_type":"github","triggered_at":"2025-09-06T12:31:53.935531"},"timestamp":"2025-09-06T12:31:53.935533","format_type":"text","source_node":"trigger_github_activity"},"node_subtype":"GITHUB","error_message":null,"execution_time":0.0004444122314453125},"action_notion_update_sync":{"logs":["Executing with sdk"],"status":"SUCCESS","node_type":"EXTERNAL_ACTION","output_data":{"error":"API error: body failed validation. Fix one:\nbody.parent.page_id should be defined, instead was `undefined`.\nbody.parent.database_id should be a valid uuid, instead was `\"notion_sync_database_id\"`.\nbody.parent.data_source_id should be defined, instead was `undefined`.\nbody.parent.workspace should be defined, instead was `undefined`.","success":false,"provider":"notion","sdk_used":true,"operation":"page_create"},"node_subtype":"NOTION","error_message":null,"execution_time":2.0226705074310303},"ai_message_classification":{"logs":["Executing OpenAI GPT agent","Error storing conversation in memory: 'AIAgentNodeExecutor' object has no attribute '_get_connected_memory_nodes'","AI agent completed: OPENAI_CHATGPT"],"status":"SUCCESS","node_type":"AI_AGENT","output_data":{"content":"Triggered by slack event","metadata":{"model":"gpt-5-mini","provider":"openai","input_text":"Triggered by slack event","max_tokens":2048,"executed_at":"2025-09-06T12:32:09.442867","temperature":1.0,"system_prompt":"You are a message classification expert. Categorize the Slack message content and extract actionable items with priority levels. Provide structured JSON output with categories, action items, and priority flags.","presence_penalty":0.0,"frequency_penalty":0.0,"conversation_messages_count":0},"timestamp":"2025-09-06T12:32:09.442885","format_type":"text","source_node":"ai_message_classification"},"node_subtype":"OPENAI_CHATGPT","error_message":null,"execution_time":15.505826473236084},"trigger_manual_onboarding":{"logs":["Executing manual trigger","Manual trigger 'Team Onboarding' activated","Manual trigger completed successfully"],"status":"SUCCESS","node_type":"TRIGGER","output_data":{"content":"Triggered by manual event","metadata":{"user_id":"7ba36345-a2bb-4ec9-a001-bb46d79d629d","input_data":{},"session_id":null,"description":"Manual trigger to initiate team onboarding process","trigger_name":"Team Onboarding","trigger_type":"manual","triggered_at":"2025-09-06T12:31:53.936052"},"timestamp":"2025-09-06T12:31:53.936054","format_type":"text","source_node":"trigger_manual_onboarding"},"node_subtype":"MANUAL","error_message":null,"execution_time":0.0005133152008056641},"action_slack_post_planning":{"logs":["Executing with sdk"],"status":"SUCCESS","node_type":"EXTERNAL_ACTION","output_data":{"error":"Slack API error: channel_not_found","success":false,"provider":"slack","sdk_used":true,"operation":"send_message"},"node_subtype":"SLACK","error_message":null,"execution_time":1.76865553855896},"trigger_cron_daily_standup":{"logs":["Executing cron trigger","Cron trigger scheduled: 0 9 * * *"],"status":"SUCCESS","node_type":"TRIGGER","output_data":{"next_run":"2025-09-07T09:00:00","timezone":"UTC","current_time":"2025-09-06T12:31:53.933024","trigger_type":"cron","triggered_at":"2025-09-06T12:31:53.933822","should_trigger":false,"cron_expression":"0 9 * * *"},"node_subtype":"CRON","error_message":null,"execution_time":0.0013570785522460938},"action_notion_update_standup":{"logs":["Executing with sdk"],"status":"SUCCESS","node_type":"EXTERNAL_ACTION","output_data":{"error":"API error: body failed validation. Fix one:\nbody.parent.page_id should be defined, instead was `undefined`.\nbody.parent.database_id should be a valid uuid, instead was `\"notion_standup_database_id\"`.\nbody.parent.data_source_id should be defined, instead was `undefined`.\nbody.parent.workspace should be defined, instead was `undefined`.","success":false,"provider":"notion","sdk_used":true,"operation":"page_create"},"node_subtype":"NOTION","error_message":null,"execution_time":2.3170931339263916},"action_slack_post_onboarding":{"logs":["Executing with sdk"],"status":"SUCCESS","node_type":"EXTERNAL_ACTION","output_data":{"error":"Slack API error: channel_not_found","success":false,"provider":"slack","sdk_used":true,"operation":"send_message"},"node_subtype":"SLACK","error_message":null,"execution_time":1.6872122287750244},"trigger_cron_sunday_planning":{"logs":["Executing cron trigger","Cron trigger scheduled: 0 10 * * 0"],"status":"SUCCESS","node_type":"TRIGGER","output_data":{"next_run":"2025-09-07T10:00:00","timezone":"UTC","current_time":"2025-09-06T12:31:53.936805","trigger_type":"cron","triggered_at":"2025-09-06T12:31:53.936944","should_trigger":false,"cron_expression":"0 10 * * 0"},"node_subtype":"CRON","error_message":null,"execution_time":0.0007703304290771484},"action_notion_onboarding_init":{"logs":["Executing with sdk"],"status":"SUCCESS","node_type":"EXTERNAL_ACTION","output_data":{"error":"API error: body failed validation. Fix one:\nbody.parent.page_id should be defined, instead was `undefined`.\nbody.parent.database_id should be a valid uuid, instead was `\"notion_onboarding_database_id\"`.\nbody.parent.data_source_id should be defined, instead was `undefined`.\nbody.parent.workspace should be defined, instead was `undefined`.","success":false,"provider":"notion","sdk_used":true,"operation":"page_create"},"node_subtype":"NOTION","error_message":null,"execution_time":1.8669357299804688},"trigger_cron_wednesday_checkin":{"logs":["Executing cron trigger","Cron trigger scheduled: 0 14 * * 3"],"status":"SUCCESS","node_type":"TRIGGER","output_data":{"next_run":"2025-09-10T14:00:00","timezone":"UTC","current_time":"2025-09-06T12:31:53.934712","trigger_type":"cron","triggered_at":"2025-09-06T12:31:53.934851","should_trigger":false,"cron_expression":"0 14 * * 3"},"node_subtype":"CRON","error_message":null,"execution_time":0.0008904933929443359},"action_http_calendar_integration":{"logs":["Starting action node execution","Executing HTTP request action","Blocked fake calendar URL: https://api.calendar.example.com/events","Use proper GOOGLE_CALENDAR external action node instead"],"status":"ERROR","node_type":"ACTION","output_data":{},"node_subtype":"HTTP_REQUEST","error_message":"Invalid calendar API URL detected: https://api.calendar.example.com/events. Use EXTERNAL_ACTION_NODE with GOOGLE_CALENDAR subtype for calendar operations instead of HTTP_REQUEST with fake URLs.","execution_time":0.0010275840759277344},"action_slack_post_sync_facilitator":{"logs":["Executing with sdk"],"status":"SUCCESS","node_type":"EXTERNAL_ACTION","output_data":{"error":"Slack API error: channel_not_found","success":false,"provider":"slack","sdk_used":true,"operation":"send_message"},"node_subtype":"SLACK","error_message":null,"execution_time":1.9347715377807617},"action_slack_post_status_aggregation":{"logs":["Executing with sdk"],"status":"SUCCESS","node_type":"EXTERNAL_ACTION","output_data":{"error":"Slack API error: channel_not_found","success":false,"provider":"slack","sdk_used":true,"operation":"send_message"},"node_subtype":"SLACK","error_message":null,"execution_time":2.6075310707092285},"temp_trigger_for_trigger_cron_sunday_planning":{"logs":["Executing manual trigger","Manual trigger 'Start from trigger_cron_sunday_planning' activated","Manual trigger completed successfully"],"status":"SUCCESS","node_type":"TRIGGER","output_data":{"content":"Triggered by manual event","metadata":{"user_id":"7ba36345-a2bb-4ec9-a001-bb46d79d629d","input_data":{},"session_id":null,"description":"Temporary trigger to start execution from trigger_cron_sunday_planning","trigger_name":"Start from trigger_cron_sunday_planning","trigger_type":"manual","triggered_at":"2025-09-06T12:31:53.931641"},"timestamp":"2025-09-06T12:31:53.931645","format_type":"text","source_node":"temp_trigger_for_trigger_cron_sunday_planning"},"node_subtype":"MANUAL","error_message":null,"execution_time":0.002099275588989258}},"execution_order":["temp_trigger_for_trigger_cron_sunday_planning","trigger_slack_message","trigger_cron_daily_standup","trigger_cron_wednesday_checkin","trigger_github_activity","trigger_manual_onboarding","trigger_cron_sunday_planning","ai_message_classification","ai_status_aggregation","ai_sync_facilitator","ai_analytics_engine","ai_onboarding","ai_planning_facilitator","ai_escalation_manager","action_slack_post_status_aggregation","action_notion_update_standup","action_slack_post_sync_facilitator","action_notion_update_sync","ai_data_processor","action_notion_onboarding_init","action_slack_post_onboarding","ai_task_management","action_slack_post_planning","action_http_calendar_integration","action_slack_post_high_priority","action_notion_log_normal_priority","ai_report_generator","action_slack_post_report"],"performance_metrics":{"cpu_usage":{"percent":0.0,"num_threads":6},"memory_usage":{"rss":128454656,"vms":340115456,"percent":1.5630825237395556},"node_execution_times":{"ai_onboarding":{"duration":10.82474946975708,"end_time":1757161983.9370177,"start_time":1757161973.1122682},"ai_data_processor":{"duration":8.598151683807373,"end_time":1757162031.6622887,"start_time":1757162023.064137},"ai_task_management":{"duration":12.875598192214966,"end_time":1757162048.102333,"start_time":1757162035.2267349},"ai_analytics_engine":{"duration":18.75759744644165,"end_time":1757161973.1119568,"start_time":1757161954.3543594},"ai_sync_facilitator":{"duration":11.182138204574585,"end_time":1757161954.3539834,"start_time":1757161943.1718452},"ai_escalation_manager":{"duration":13.848788499832153,"end_time":1757162014.1560588,"start_time":1757162000.3072703},"ai_status_aggregation":{"duration":13.728180408477783,"end_time":1757161943.1716576,"start_time":1757161929.4434772},"trigger_slack_message":{"duration":0.0004899501800537109,"end_time":1757161913.9325876,"start_time":1757161913.9320977},"ai_planning_facilitator":{"duration":16.369566679000854,"end_time":1757162000.306855,"start_time":1757161983.9372883},"trigger_github_activity":{"duration":0.0004444122314453125,"end_time":1757161913.935696,"start_time":1757161913.9352515},"action_notion_update_sync":{"duration":2.0226705074310303,"end_time":1757162023.059209,"start_time":1757162021.0365386},"ai_message_classification":{"duration":15.505826473236084,"end_time":1757161929.4432194,"start_time":1757161913.937393},"trigger_manual_onboarding":{"duration":0.0005133152008056641,"end_time":1757161913.9363096,"start_time":1757161913.9357963},"action_slack_post_planning":{"duration":1.76865553855896,"end_time":1757162049.871261,"start_time":1757162048.1026053},"trigger_cron_daily_standup":{"duration":0.0013570785522460938,"end_time":1757161913.934115,"start_time":1757161913.9327579},"action_notion_update_standup":{"duration":2.3170931339263916,"end_time":1757162019.0880008,"start_time":1757162016.7709076},"action_slack_post_onboarding":{"duration":1.6872122287750244,"end_time":1757162035.2203324,"start_time":1757162033.5331202},"trigger_cron_sunday_planning":{"duration":0.0007703304290771484,"end_time":1757161913.9372187,"start_time":1757161913.9364483},"action_notion_onboarding_init":{"duration":1.8669357299804688,"end_time":1757162033.5293992,"start_time":1757162031.6624634},"trigger_cron_wednesday_checkin":{"duration":0.0008904933929443359,"end_time":1757161913.9351273,"start_time":1757161913.9342368},"action_http_calendar_integration":{"duration":0.0010275840759277344,"end_time":1757162049.875726,"start_time":1757162049.8746984},"action_slack_post_sync_facilitator":{"duration":1.9347715377807617,"end_time":1757162021.031576,"start_time":1757162019.0968044},"action_slack_post_status_aggregation":{"duration":2.6075310707092285,"end_time":1757162016.7639902,"start_time":1757162014.156459},"temp_trigger_for_trigger_cron_sunday_planning":{"duration":0.002099275588989258,"end_time":1757161913.9319298,"start_time":1757161913.9298306}},"total_execution_time":135.90305924415588}},"metadata":{},"execution_metadata":{"user_id":"7ba36345-a2bb-4ec9-a001-bb46d79d629d","session_id":null,"trigger_data":{},"start_from_node":"trigger_cron_sunday_planning","skip_trigger_validation":true},"error_message":"Node action_http_calendar_integration failed: Invalid calendar API URL detected: https://api.calendar.example.com/events. Use EXTERNAL_ACTION_NODE with GOOGLE_CALENDAR subtype for calendar operations instead of HTTP_REQUEST with fake URLs.","error_details":{},"created_at":"2025-09-06T12:31:52.995516+00:00","updated_at":"2025-09-06T12:34:10.069060+00:00"}