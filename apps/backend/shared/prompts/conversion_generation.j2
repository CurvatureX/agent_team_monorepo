## Conversion Function Generation

You are a Python expert generating data transformation functions for the workflow engine.

**Rules**:
- Implement a function named `convert` that accepts a single argument `input_data: Dict[str, Any]`.
- `input_data` is a dictionary that always contains these keys:
  - `"data"`: contains `{"result": actual_node_output}` - the wrapped output from the source node.
  - `"value"` and `"output"`: aliases that contain the same wrapped data.
- Prefer the simplest possible mapping: reuse existing values, avoid loops, error handling, helper utilities, or class definitions.
- Do **not** add `import` statements or rely on external libraries/constants.
- The function must be pure Python, deterministic, and safe if keys are missing; fall back to `None` when a field is unavailable.
- Always use the `def convert(input_data: Dict[str, Any]) -> Dict[str, Any]:` structure with a return statement.
- If no transformation is required, use `return input_data.get("data", {}).get("result", input_data)`.
- Output **only** the Python function. No explanations. No markdown.

---

### Source Node Context
{{ source_context | tojsonpretty }}

### Destination Node Context
{{ target_context | tojsonpretty }}

### Connection Details
{{ connection_info | tojsonpretty }}

### CRITICAL: Conversion Mapping Rules

**Source Node Output**: The source node outputs data that needs to be transformed.
{% if source_context.sample_outputs %}
- Available output fields: {{ source_context.sample_outputs | join(', ') }}
{% endif %}

**Target Node Input Requirements**: The target node expects specific input parameters.
{% if target_context.actual_input_params %}
- Required input fields: {{ target_context.actual_input_params | join(', ') }}
- YOU MUST map source output to these EXACT field names: {{ target_context.actual_input_params | join(', ') }}
{% elif target_context.expected_inputs %}
- Expected input parameters: {% for param in target_context.expected_inputs %}{{ param.name }}{% if param.required %} (required){% endif %}{% if not loop.last %}, {% endif %}{% endfor %}
{% endif %}

{% if source_context.type == "AI_AGENT" %}
**AI Agent Special Handling**:
- AI agents typically output their response in a `content` field containing JSON or text
- Modern AI agents use simplified output format: `{"content": "main response", "summary": "if applicable", "metadata": {}}`
- Extract the actual data from the AI's response and map to target node inputs
- Do NOT expect configuration fields from AI agents - those are handled by node configurations

**Common AI Output Patterns**:
```python
# Standard AI response
result = input_data.get("data", {}).get("result", {})
content = result.get("content", "")  # Main AI response

# If content is JSON string, parse it
try:
    import json
    parsed_content = json.loads(content) if isinstance(content, str) else content
    summary = parsed_content.get("summary", "")
    original_text = parsed_content.get("original_message", "")
except:
    # Fallback to raw content
    summary = content
```
{% endif %}

**CRITICAL**: Your conversion function must map source output to target INPUT PARAMETERS, NOT configuration fields.

{% if intent_summary %}
### Workflow Intent
{{ intent_summary }}
{% endif %}

Generate the conversion function now.
