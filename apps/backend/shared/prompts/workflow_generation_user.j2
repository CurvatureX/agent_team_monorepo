**üö® ABSOLUTELY CRITICAL: CONNECTIONS ARE MANDATORY!**

YOU MUST GENERATE CONNECTIONS IN THE WORKFLOW JSON - NO EMPTY CONNECTIONS ARRAY!

**For every workflow you generate:**
1. **Count your nodes** - if you have N nodes, you need at least N-1 connections
2. **Link them sequentially** - first node connects to second, second to third, etc.
3. **Use this exact format:**
```json
"connections": [
  {
    "id": "node1_to_node2",
    "from_node": "first_node_id",
    "to_node": "second_node_id",
    "output_key": "result",
    "conversion_function": "lambda input_data: input_data['data']"
  }
]
```

**EXAMPLE for 2-node workflow (trigger + action):**
```json
"connections": [
  {
    "id": "trigger_to_action",
    "from_node": "cron_trigger_1",
    "to_node": "http_action_1",
    "output_key": "result",
    "conversion_function": "lambda input_data: input_data['data']"
  }
]
```

**‚ùå NEVER generate**: `"connections": []` or `"connections": {}`
**‚úÖ ALWAYS generate**: Array with actual connection objects linking your nodes

Create a workflow for: {{ intent_summary }}

**Workflow Name Requirement:**
Generate a concise, meaningful name that describes what this workflow does. Examples:
- If the intent is about GitHub PR notifications ‚Üí "GitHub PR Slack Notifier"
- If the intent is about daily reports ‚Üí "Daily Sales Report Generator"
- If the intent is about monitoring ‚Üí "Server Health Monitor"
If the user explicitly mentioned a name in their request, use that name.

{% if conversation_context %}
## Context from previous conversations:
{{ conversation_context }}
{% endif %}

{% if current_workflow %}
## Previous workflow attempt:
{{ current_workflow }}
{% endif %}

{% if creation_error %}
## Previous Error - Please Fix:
{{ creation_error }}
{% endif %}

## Your Task:
Use your available MCP tools to generate a complete workflow. Follow this exact sequence:

1. **Call `get_node_types()`** once to discover available nodes
2. **Call `get_node_details()`** with a SINGLE call containing ALL required nodes as an array
   - DO NOT call get_node_details multiple times with the same nodes
   - Pass all nodes in one array: `{"nodes": [{"node_type": "...", "subtype": "..."}, ...]}`

**üö® CRITICAL - MCP Type Compliance is MANDATORY:**
When MCP returns node specifications, each parameter includes a "type" field that MUST be strictly followed:

- `type="integer"` ‚Üí Generate ONLY numbers: `123`, `45678`, `999`
  - ‚ùå WRONG: `"123"`, `"mock-id"`, `"{{id}}"`
  - ‚úÖ RIGHT: `123`, `45678`, `999`

- `type="string"` ‚Üí Generate ONLY proper strings: `"example text"`, `"user@email.com"`
  - ‚ùå WRONG: `"mock-something"`, `"{{variable}}"`, `123` (without quotes)
  - ‚úÖ RIGHT: `"Hello World"`, `"user@example.com"`, `"Production Server"`

- `type="boolean"` ‚Üí Generate ONLY: `true` or `false`
  - ‚ùå WRONG: `"true"`, `1`, `"false"`
  - ‚úÖ RIGHT: `true`, `false`

- `type="array"` ‚Üí Generate JSON arrays: `["item1", "item2"]`, `[]`
- `type="object"` ‚Üí Generate JSON objects: `{"key": "value"}`, `{}`

**MCP's type field is the source of truth - ignore parameter names when determining types!**

**üö® CRITICAL - Complete Workflow Requirement:**
You MUST generate a COMPLETE workflow that fully implements the user's requirements.

For the given intent: "{{ intent_summary }}"
- Analyze what ALL the steps are needed to complete this workflow end-to-end
- Include EVERY node type needed: triggers, processing nodes, human interactions, external actions
- Do NOT generate partial workflows - the workflow must be fully functional

**Special Check for Approval Workflows:**
If the user mentions "confirmation", "approval", "wait for user", or similar concepts:
- You MUST include a HUMAN_IN_THE_LOOP node to wait for user response
- You MUST include the final action node that executes after approval
- Example flow: Trigger ‚Üí Process ‚Üí Send confirmation ‚Üí HUMAN_IN_THE_LOOP ‚Üí Final action

**üö® CRITICAL - Connections Are Required:**
Your workflow MUST include connections that link the nodes together into a coherent flow:
- Each node (except the first trigger) should receive input from a previous node
- Each node (except the last action) should output to a subsequent node
- Connections format: `"connections": [{"id": "conn1", "from_node": "node1", "to_node": "node2", "output_key": "result", "conversion_function": "lambda input_data: input_data['data']"}]`
- Even simple connections need conversion functions because node input/output parameter names usually differ

**Output:** Complete JSON workflow only. Start with `{` and end with `}`. No explanations or markdown.
