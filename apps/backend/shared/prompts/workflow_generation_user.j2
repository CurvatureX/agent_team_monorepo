**üö® ABSOLUTELY CRITICAL: CONNECTIONS ARE MANDATORY (EXCEPT TOOL/MEMORY)!**

YOU MUST GENERATE CONNECTIONS IN THE WORKFLOW JSON - NO EMPTY CONNECTIONS ARRAY!

**For every workflow you generate:**
1. **Count executable nodes** - if you have K executable nodes (ALL nodes EXCEPT TOOL and MEMORY), you need at least K-1 connections
2. **Link them sequentially** - first node connects to second, second to third, etc.
3. **Use this exact format:**
```json
"connections": [
  {
    "id": "node1_to_node2",
    "from_node": "first_node_id",
    "to_node": "second_node_id",
    "output_key": "result",
    "conversion_function": ""
  }
]
```

**EXAMPLE A: 2 executable nodes (trigger + action):**
```json
"connections": [
  {
    "id": "trigger_to_action",
    "from_node": "cron_trigger_1",
    "to_node": "http_action_1",
    "output_key": "result",
    "conversion_function": ""
  }
]
```

**‚ùå NEVER generate**: `"connections": []` or `"connections": {}`
**‚úÖ ALWAYS generate**: Array with actual connection objects linking your nodes
**‚ùó DO NOT** include TOOL or MEMORY nodes in `connections` ‚Äî attach them to the AI_AGENT node's `attached_nodes` instead.

**EXAMPLE B: AI agent with TOOL + MEMORY attached (NOT connected):**
```json
{
  "nodes": [
    {"id": "cron1", "type": "TRIGGER", "subtype": "CRON", "name": "cron1"},
    {"id": "mem1", "type": "MEMORY", "subtype": "CONVERSATION_BUFFER", "name": "conv_mem"},
    {"id": "tool1", "type": "TOOL", "subtype": "NOTION_MCP_TOOL", "name": "notion_tool"},
    {"id": "agent1", "type": "AI_AGENT", "subtype": "OPENAI_CHATGPT", "name": "assistant_ai", "attached_nodes": ["mem1", "tool1"]},
    {"id": "act1", "type": "EXTERNAL_ACTION", "subtype": "NOTION", "name": "notion_action"}
  ],
  "connections": [
    {"id": "c1", "from_node": "cron1", "to_node": "agent1", "output_key": "result", "conversion_function": "lambda input_data: input_data['data']"},
    {"id": "c2", "from_node": "agent1", "to_node": "act1", "output_key": "result", "conversion_function": "lambda input_data: input_data['data']"}
  ]
}
```

Create a workflow for: {{ intent_summary }}

**Workflow Name Requirement:**
Generate a concise, meaningful name that describes what this workflow does. Examples:
- If the intent is about GitHub PR notifications ‚Üí "GitHub PR Slack Notifier"
- If the intent is about daily reports ‚Üí "Daily Sales Report Generator"
- If the intent is about monitoring ‚Üí "Server Health Monitor"
If the user explicitly mentioned a name in their request, use that name.

{% if conversation_context %}
## Context from previous conversations:
{{ conversation_context }}
{% endif %}

{% if current_workflow %}
## Previous workflow attempt:
{{ current_workflow }}
{% endif %}

{% if creation_error %}
## Previous Error - Please Fix:
{{ creation_error }}
{% endif %}

## Your Task:
Use your available MCP tools to generate a complete workflow. Follow this exact sequence:

1. **Call `get_node_types()`** once to discover available nodes
2. **Call `get_node_details()`** with a SINGLE call containing ALL required nodes as an array
   - DO NOT call get_node_details multiple times with the same nodes
   - Pass all nodes in one array: `{"nodes": [{"node_type": "...", "subtype": "..."}, ...]}`

**üö® CRITICAL - Parameter Generation Strategy:**
When MCP returns node specifications, follow this EXACT priority order for parameter values:

**Priority 1: User-Specified Values**
- If user mentions specific values, use those EXACT values
- Example: User says "send to #general channel" ‚Üí use "#general"

**Priority 2: Required Parameters (MCP required: true) WITHOUT User Input**
- **MUST** use EXACTLY the string `{{"{{$placeholder}}"}}`
- **NEVER** use any other format like:
  - ‚ùå "xoxb-slack-bot-token"
  - ‚ùå "notion-integration-token"
  - ‚ùå "YOUR_API_KEY_HERE"
  - ‚ùå "T1234567890"
  - ‚ùå 123456789 (fake numbers)
- **ONLY** use: ‚úÖ `{{"{{$placeholder}}"}}`

**Priority 3: Optional Parameters (MCP required: false)**
- If user hasn't specified a value ‚Üí OMIT the parameter entirely

**Type Compliance Examples:**
- `type="integer"` + user didn't specify ‚Üí `{{"{{$placeholder}}"}}`
- `type="string"` + user didn't specify ‚Üí `{{"{{$placeholder}}"}}`
- `type="boolean"` + user didn't specify ‚Üí `{{"{{$placeholder}}"}}`
- `type="array"` + user didn't specify ‚Üí `{{"{{$placeholder}}"}}`
- `type="object"` + user didn't specify ‚Üí `{{"{{$placeholder}}"}}`

**MCP's required field determines placeholder usage - type only affects final validation!**

**üö® CRITICAL - Complete Workflow Requirement:**
You MUST generate a COMPLETE workflow that fully implements the user's requirements.

**üö® CRITICAL - Node Names Must NOT Contain Spaces:**
All node names MUST use underscores/dashes only (e.g. "slack_trigger", "ai_agent_1", "notion_action").

For the given intent: "{{ intent_summary }}"
- Analyze what ALL the steps are needed to complete this workflow end-to-end
- Include EVERY node type needed: triggers, processing nodes, human interactions, external actions
- Do NOT generate partial workflows - the workflow must be fully functional

**Special Check for Approval Workflows:**
If the user mentions "confirmation", "approval", "wait for user", or similar concepts:
- You MUST include a HUMAN_IN_THE_LOOP interaction node to wait for user response
- You MUST include the final action node that executes after approval
- Example flow: Trigger ‚Üí Process ‚Üí HUMAN_IN_THE_LOOP (sends message + waits) ‚Üí Final action
- **CRITICAL**: DO NOT add a separate EXTERNAL_ACTION node before the HIL node to send messages
  - HIL interaction nodes (SLACK_INTERACTION, GMAIL_INTERACTION, DISCORD_INTERACTION, etc.) already send messages/emails themselves
  - The message is configured in the HIL node's `message_template` or `email_template` parameter
  - Adding EXTERNAL_ACTION before HIL is redundant and incorrect

**Example of CORRECT approval workflow:**
```
Trigger ‚Üí AI_AGENT (process data) ‚Üí HUMAN_IN_THE_LOOP:SLACK_INTERACTION ‚Üí EXTERNAL_ACTION:NOTION (final action)
```

**Example of INCORRECT approval workflow (DO NOT DO THIS):**
```
Trigger ‚Üí AI_AGENT ‚Üí EXTERNAL_ACTION:SLACK ‚Üí HUMAN_IN_THE_LOOP:SLACK_INTERACTION ‚Üí ACTION
                     ^^^^^^^^^^^^^^^^^^^^^^^^
                     This is wrong! The HIL node already sends to Slack!
```

**üö® CRITICAL - Connections Are Required:**
Your workflow MUST include connections that link the nodes together into a coherent flow:
- Each node (except the first trigger) should receive input from a previous node
- Each node (except the last action) should output to a subsequent node
- Connections format: `"connections": [{"id": "conn1", "from_node": "node1", "to_node": "node2", "output_key": "result", "conversion_function": "lambda input_data: input_data['data']"}]`
- Even simple connections need conversion functions because node input/output parameter names usually differ

**Attached Nodes Rule:**
- `attached_nodes` belongs ONLY to AI_AGENT nodes.
- TOOL (MCP tools) and MEMORY nodes must NOT be connected. Instead, add their node IDs to the AI_AGENT node's `attached_nodes` array.
- Keep TOOL/MEMORY nodes in the `nodes` list; they have no ports and are used within the AI agent's execution.
- Sanity check before output: ensure no connection has TOOL/MEMORY as `from_node` or `to_node`.

**AI Agent Configuration:**
- Use `configurations.model` from MCP `get_node_details()` options (do NOT output `model_version`).
- Put the system prompt in `configurations.system_prompt` (do NOT create a `parameters` field).

**Output:** Complete JSON workflow only. Start with `{` and end with `}`. No explanations or markdown.
