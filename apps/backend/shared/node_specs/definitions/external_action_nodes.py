"""
External Action Node Specifications.

Node specifications for EXTERNAL_ACTION_NODE type with all subtypes
that interact with external systems and platforms.
"""

from shared.node_specs.base import NodeSpec, ParameterSpec, PortSpec

# EXTERNAL_GITHUB Node Specification
external_github_spec = NodeSpec(
    node_type="EXTERNAL_ACTION_NODE",
    subtype="EXTERNAL_GITHUB",
    display_name="GitHub Action",
    description="Performs actions using the GitHub API",
    category="external_action",
    parameters=[
        ParameterSpec(
            name="action",
            display_name="Action Type",
            description="The GitHub action to perform",
            param_type="string",
            required=True,
            allowed_values=[
                "create_repo",
                "update_repo",
                "delete_repo",
                "create_issue",
                "update_issue",
                "create_pr",
                "merge_pr",
                "create_branch",
                "delete_branch",
            ],
        ),
        ParameterSpec(
            name="repository",
            display_name="Repository",
            description="The GitHub repository (owner/repo format)",
            param_type="string",
            required=True,
        ),
        ParameterSpec(
            name="auth_token",
            display_name="GitHub Token",
            description="GitHub personal access token",
            param_type="string",
            required=True,
            is_secret=True,
        ),
        ParameterSpec(
            name="branch",
            display_name="Branch Name",
            description="Branch name for branch operations",
            param_type="string",
            required=False,
        ),
        ParameterSpec(
            name="title",
            display_name="Title",
            description="Title for issues or pull requests",
            param_type="string",
            required=False,
        ),
        ParameterSpec(
            name="body",
            display_name="Body/Description",
            description="Body content for issues or pull requests",
            param_type="text",
            required=False,
        ),
    ],
    input_ports=[
        PortSpec(
            name="trigger",
            display_name="Trigger",
            description="Trigger the GitHub action",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="repository_data",
            display_name="Repository Data",
            description="Repository information and parameters",
            port_type="data",
            required=False,
        ),
    ],
    output_ports=[
        PortSpec(
            name="success",
            display_name="Success",
            description="Action completed successfully",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="error",
            display_name="Error",
            description="Action failed",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="result",
            display_name="Result Data",
            description="GitHub API response data",
            port_type="data",
            required=True,
        ),
    ],
)

# EXTERNAL_GOOGLE_CALENDAR Node Specification
external_google_calendar_spec = NodeSpec(
    node_type="EXTERNAL_ACTION_NODE",
    subtype="EXTERNAL_GOOGLE_CALENDAR",
    display_name="Google Calendar Action",
    description="Interacts with Google Calendar API",
    category="external_action",
    parameters=[
        ParameterSpec(
            name="action",
            display_name="Action Type",
            description="The calendar action to perform",
            param_type="string",
            required=True,
            allowed_values=[
                "create_event",
                "update_event",
                "delete_event",
                "list_events",
                "get_free_busy",
            ],
        ),
        ParameterSpec(
            name="calendar_id",
            display_name="Calendar ID",
            description="Google Calendar ID (primary for default)",
            param_type="string",
            required=True,
            default_value="primary",
        ),
        ParameterSpec(
            name="credentials",
            display_name="Google Credentials",
            description="Google OAuth2 credentials JSON",
            param_type="json",
            required=True,
            is_secret=True,
        ),
        ParameterSpec(
            name="event_title",
            display_name="Event Title",
            description="Title of the calendar event",
            param_type="string",
            required=False,
        ),
        ParameterSpec(
            name="start_time",
            display_name="Start Time",
            description="Event start time (ISO format)",
            param_type="datetime",
            required=False,
        ),
        ParameterSpec(
            name="end_time",
            display_name="End Time",
            description="Event end time (ISO format)",
            param_type="datetime",
            required=False,
        ),
        ParameterSpec(
            name="attendees",
            display_name="Attendees",
            description="List of attendee email addresses",
            param_type="array",
            required=False,
        ),
    ],
    input_ports=[
        PortSpec(
            name="trigger",
            display_name="Trigger",
            description="Trigger the calendar action",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="event_data",
            display_name="Event Data",
            description="Calendar event information",
            port_type="data",
            required=False,
        ),
    ],
    output_ports=[
        PortSpec(
            name="success",
            display_name="Success",
            description="Action completed successfully",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="error",
            display_name="Error",
            description="Action failed",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="calendar_result",
            display_name="Calendar Result",
            description="Google Calendar API response",
            port_type="data",
            required=True,
        ),
    ],
)

# EXTERNAL_TRELLO Node Specification
external_trello_spec = NodeSpec(
    node_type="EXTERNAL_ACTION_NODE",
    subtype="EXTERNAL_TRELLO",
    display_name="Trello Action",
    description="Sends actions to or reads data from Trello",
    category="external_action",
    parameters=[
        ParameterSpec(
            name="action",
            display_name="Action Type",
            description="The Trello action to perform",
            param_type="string",
            required=True,
            allowed_values=[
                "create_board",
                "create_list",
                "create_card",
                "update_card",
                "move_card",
                "add_comment",
                "add_attachment",
            ],
        ),
        ParameterSpec(
            name="board_id",
            display_name="Board ID",
            description="Trello board identifier",
            param_type="string",
            required=True,
        ),
        ParameterSpec(
            name="api_key",
            display_name="Trello API Key",
            description="Trello API key",
            param_type="string",
            required=True,
            is_secret=True,
        ),
        ParameterSpec(
            name="api_token",
            display_name="Trello API Token",
            description="Trello API token",
            param_type="string",
            required=True,
            is_secret=True,
        ),
        ParameterSpec(
            name="list_id",
            display_name="List ID",
            description="Trello list identifier",
            param_type="string",
            required=False,
        ),
        ParameterSpec(
            name="card_name",
            display_name="Card Name",
            description="Name of the Trello card",
            param_type="string",
            required=False,
        ),
        ParameterSpec(
            name="card_description",
            display_name="Card Description",
            description="Description of the Trello card",
            param_type="text",
            required=False,
        ),
    ],
    input_ports=[
        PortSpec(
            name="trigger",
            display_name="Trigger",
            description="Trigger the Trello action",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="trello_data",
            display_name="Trello Data",
            description="Trello board and card information",
            port_type="data",
            required=False,
        ),
    ],
    output_ports=[
        PortSpec(
            name="success",
            display_name="Success",
            description="Action completed successfully",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="error",
            display_name="Error",
            description="Action failed",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="trello_result",
            display_name="Trello Result",
            description="Trello API response data",
            port_type="data",
            required=True,
        ),
    ],
)

# EXTERNAL_EMAIL Node Specification
external_email_spec = NodeSpec(
    node_type="EXTERNAL_ACTION_NODE",
    subtype="EXTERNAL_EMAIL",
    display_name="Email Action",
    description="Sends or receives emails",
    category="external_action",
    parameters=[
        ParameterSpec(
            name="action",
            display_name="Action Type",
            description="The email action to perform",
            param_type="string",
            required=True,
            allowed_values=["send", "receive", "parse", "forward"],
        ),
        ParameterSpec(
            name="email_provider",
            display_name="Email Provider",
            description="Email service provider",
            param_type="string",
            required=True,
            allowed_values=["gmail", "outlook", "smtp", "imap"],
            default_value="gmail",
        ),
        ParameterSpec(
            name="credentials",
            display_name="Email Credentials",
            description="Email authentication credentials",
            param_type="json",
            required=True,
            is_secret=True,
        ),
        ParameterSpec(
            name="recipients",
            display_name="Recipients",
            description="Email recipient addresses",
            param_type="array",
            required=False,
        ),
        ParameterSpec(
            name="subject",
            display_name="Subject",
            description="Email subject line",
            param_type="string",
            required=False,
        ),
        ParameterSpec(
            name="body",
            display_name="Email Body",
            description="Email content body",
            param_type="text",
            required=False,
        ),
        ParameterSpec(
            name="attachments",
            display_name="Attachments",
            description="File attachments",
            param_type="array",
            required=False,
        ),
    ],
    input_ports=[
        PortSpec(
            name="trigger",
            display_name="Trigger",
            description="Trigger the email action",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="email_data",
            display_name="Email Data",
            description="Email content and metadata",
            port_type="data",
            required=False,
        ),
    ],
    output_ports=[
        PortSpec(
            name="success",
            display_name="Success",
            description="Email action completed successfully",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="error",
            display_name="Error",
            description="Email action failed",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="email_result",
            display_name="Email Result",
            description="Email operation result data",
            port_type="data",
            required=True,
        ),
    ],
)

# EXTERNAL_SLACK Node Specification
external_slack_spec = NodeSpec(
    node_type="EXTERNAL_ACTION_NODE",
    subtype="EXTERNAL_SLACK",
    display_name="Slack Action",
    description="Sends messages or reads data from Slack",
    category="external_action",
    parameters=[
        ParameterSpec(
            name="action",
            display_name="Action Type",
            description="The Slack action to perform",
            param_type="string",
            required=True,
            allowed_values=[
                "send_message",
                "update_message",
                "delete_message",
                "upload_file",
                "create_channel",
                "invite_user",
            ],
        ),
        ParameterSpec(
            name="channel",
            display_name="Channel",
            description="Slack channel ID or name",
            param_type="string",
            required=True,
        ),
        ParameterSpec(
            name="bot_token",
            display_name="Bot Token",
            description="Slack bot token",
            param_type="string",
            required=True,
            is_secret=True,
        ),
        ParameterSpec(
            name="message",
            display_name="Message",
            description="Message content to send",
            param_type="text",
            required=False,
        ),
        ParameterSpec(
            name="user",
            display_name="Target User",
            description="User ID for user-specific actions",
            param_type="string",
            required=False,
        ),
        ParameterSpec(
            name="thread_ts",
            display_name="Thread Timestamp",
            description="Timestamp for threaded messages",
            param_type="string",
            required=False,
        ),
    ],
    input_ports=[
        PortSpec(
            name="trigger",
            display_name="Trigger",
            description="Trigger the Slack action",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="slack_data",
            display_name="Slack Data",
            description="Slack message and channel information",
            port_type="data",
            required=False,
        ),
    ],
    output_ports=[
        PortSpec(
            name="success",
            display_name="Success",
            description="Slack action completed successfully",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="error",
            display_name="Error",
            description="Slack action failed",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="slack_result",
            display_name="Slack Result",
            description="Slack API response data",
            port_type="data",
            required=True,
        ),
    ],
)

# EXTERNAL_API_CALL Node Specification
external_api_call_spec = NodeSpec(
    node_type="EXTERNAL_ACTION_NODE",
    subtype="EXTERNAL_API_CALL",
    display_name="Generic API Call",
    description="Makes a generic HTTP API call",
    category="external_action",
    parameters=[
        ParameterSpec(
            name="method",
            display_name="HTTP Method",
            description="HTTP request method",
            param_type="string",
            required=True,
            allowed_values=["GET", "POST", "PUT", "DELETE", "PATCH", "HEAD", "OPTIONS"],
            default_value="GET",
        ),
        ParameterSpec(
            name="url",
            display_name="API URL",
            description="Target API endpoint URL",
            param_type="url",
            required=True,
        ),
        ParameterSpec(
            name="headers",
            display_name="Headers",
            description="HTTP request headers",
            param_type="json",
            required=False,
            default_value={},
        ),
        ParameterSpec(
            name="query_params",
            display_name="Query Parameters",
            description="URL query parameters",
            param_type="json",
            required=False,
            default_value={},
        ),
        ParameterSpec(
            name="body",
            display_name="Request Body",
            description="HTTP request body data",
            param_type="json",
            required=False,
        ),
        ParameterSpec(
            name="timeout",
            display_name="Timeout",
            description="Request timeout in seconds",
            param_type="number",
            required=False,
            default_value=30,
        ),
        ParameterSpec(
            name="authentication",
            display_name="Authentication",
            description="API authentication method",
            param_type="string",
            required=False,
            allowed_values=["none", "bearer", "basic", "api_key"],
            default_value="none",
        ),
    ],
    input_ports=[
        PortSpec(
            name="trigger",
            display_name="Trigger",
            description="Trigger the API call",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="request_data",
            display_name="Request Data",
            description="Dynamic request parameters",
            port_type="data",
            required=False,
        ),
    ],
    output_ports=[
        PortSpec(
            name="success",
            display_name="Success",
            description="API call completed successfully",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="error",
            display_name="Error",
            description="API call failed",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="response",
            display_name="API Response",
            description="HTTP response data and metadata",
            port_type="data",
            required=True,
        ),
    ],
)

# EXTERNAL_WEBHOOK Node Specification
external_webhook_spec = NodeSpec(
    node_type="EXTERNAL_ACTION_NODE",
    subtype="EXTERNAL_WEBHOOK",
    display_name="Webhook Action",
    description="Sends a webhook to an external service",
    category="external_action",
    parameters=[
        ParameterSpec(
            name="url",
            display_name="Webhook URL",
            description="Target webhook endpoint URL",
            param_type="url",
            required=True,
        ),
        ParameterSpec(
            name="payload",
            display_name="Payload",
            description="Webhook payload data",
            param_type="json",
            required=True,
        ),
        ParameterSpec(
            name="method",
            display_name="HTTP Method",
            description="HTTP method for webhook",
            param_type="string",
            required=False,
            allowed_values=["POST", "PUT", "PATCH"],
            default_value="POST",
        ),
        ParameterSpec(
            name="headers",
            display_name="Headers",
            description="HTTP headers for webhook",
            param_type="json",
            required=False,
            default_value={"Content-Type": "application/json"},
        ),
        ParameterSpec(
            name="retry_attempts",
            display_name="Retry Attempts",
            description="Number of retry attempts on failure",
            param_type="number",
            required=False,
            default_value=3,
        ),
        ParameterSpec(
            name="retry_delay",
            display_name="Retry Delay",
            description="Delay between retries in seconds",
            param_type="number",
            required=False,
            default_value=5,
        ),
        ParameterSpec(
            name="signature_secret",
            display_name="Signature Secret",
            description="Secret for webhook signature verification",
            param_type="string",
            required=False,
            is_secret=True,
        ),
    ],
    input_ports=[
        PortSpec(
            name="trigger",
            display_name="Trigger",
            description="Trigger the webhook",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="webhook_data",
            display_name="Webhook Data",
            description="Dynamic webhook payload data",
            port_type="data",
            required=False,
        ),
    ],
    output_ports=[
        PortSpec(
            name="success",
            display_name="Success",
            description="Webhook sent successfully",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="error",
            display_name="Error",
            description="Webhook failed",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="webhook_result",
            display_name="Webhook Result",
            description="Webhook response and status",
            port_type="data",
            required=True,
        ),
    ],
)

# EXTERNAL_NOTIFICATION Node Specification
external_notification_spec = NodeSpec(
    node_type="EXTERNAL_ACTION_NODE",
    subtype="EXTERNAL_NOTIFICATION",
    display_name="Notification Action",
    description="Sends a notification to a user or system",
    category="external_action",
    parameters=[
        ParameterSpec(
            name="type",
            display_name="Notification Type",
            description="Type of notification to send",
            param_type="string",
            required=True,
            allowed_values=["push", "sms", "email", "in_app"],
        ),
        ParameterSpec(
            name="message",
            display_name="Message",
            description="Notification message content",
            param_type="text",
            required=True,
        ),
        ParameterSpec(
            name="target",
            display_name="Target",
            description="Notification target (user ID, device token, phone number, etc.)",
            param_type="string",
            required=True,
        ),
        ParameterSpec(
            name="title",
            display_name="Title",
            description="Notification title (for push notifications)",
            param_type="string",
            required=False,
        ),
        ParameterSpec(
            name="provider",
            display_name="Notification Provider",
            description="Notification service provider",
            param_type="string",
            required=False,
            allowed_values=["fcm", "apns", "twilio", "ses", "oneSignal"],
            default_value="fcm",
        ),
        ParameterSpec(
            name="provider_config",
            display_name="Provider Configuration",
            description="Provider-specific configuration",
            param_type="json",
            required=False,
            is_secret=True,
        ),
        ParameterSpec(
            name="priority",
            display_name="Priority",
            description="Notification priority level",
            param_type="string",
            required=False,
            allowed_values=["low", "normal", "high"],
            default_value="normal",
        ),
    ],
    input_ports=[
        PortSpec(
            name="trigger",
            display_name="Trigger",
            description="Trigger the notification",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="notification_data",
            display_name="Notification Data",
            description="Dynamic notification content",
            port_type="data",
            required=False,
        ),
    ],
    output_ports=[
        PortSpec(
            name="success",
            display_name="Success",
            description="Notification sent successfully",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="error",
            display_name="Error",
            description="Notification failed",
            port_type="execution",
            required=True,
        ),
        PortSpec(
            name="notification_result",
            display_name="Notification Result",
            description="Notification delivery status and metadata",
            port_type="data",
            required=True,
        ),
    ],
)

# Export all external action node specifications
EXTERNAL_ACTION_NODE_SPECS = {
    "EXTERNAL_GITHUB": external_github_spec,
    "EXTERNAL_GOOGLE_CALENDAR": external_google_calendar_spec,
    "EXTERNAL_TRELLO": external_trello_spec,
    "EXTERNAL_EMAIL": external_email_spec,
    "EXTERNAL_SLACK": external_slack_spec,
    "EXTERNAL_API_CALL": external_api_call_spec,
    "EXTERNAL_WEBHOOK": external_webhook_spec,
    "EXTERNAL_NOTIFICATION": external_notification_spec,
}
