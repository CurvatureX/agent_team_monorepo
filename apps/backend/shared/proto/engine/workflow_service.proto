syntax = "proto3";

package workflow_engine;

option go_package = "github.com/agent-team/workflow_engine/proto";

import "workflow.proto";
import "execution.proto";
import "ai_system.proto";
import "integration.proto";

// ============================================================================
// 工作流引擎 gRPC 服务定义
// ============================================================================

// 工作流管理服务
service WorkflowService {
  // 工作流 CRUD 操作
  rpc CreateWorkflow(CreateWorkflowRequest) returns (CreateWorkflowResponse);
  rpc GetWorkflow(GetWorkflowRequest) returns (GetWorkflowResponse);
  rpc UpdateWorkflow(UpdateWorkflowRequest) returns (UpdateWorkflowResponse);
  rpc DeleteWorkflow(DeleteWorkflowRequest) returns (DeleteWorkflowResponse);
  rpc ListWorkflows(ListWorkflowsRequest) returns (ListWorkflowsResponse);
  
  // 工作流执行
  rpc ExecuteWorkflow(ExecuteWorkflowRequest) returns (ExecuteWorkflowResponse);
  rpc GetExecutionStatus(GetExecutionStatusRequest) returns (GetExecutionStatusResponse);
  rpc CancelExecution(CancelExecutionRequest) returns (CancelExecutionResponse);
  rpc GetExecutionHistory(GetExecutionHistoryRequest) returns (GetExecutionHistoryResponse);
  
  // 工作流验证和调试
  rpc ValidateWorkflow(ValidateWorkflowRequest) returns (ValidateWorkflowResponse);
  rpc TestNode(TestNodeRequest) returns (TestNodeResponse);
}

// AI Agent 服务
service AIAgentService {
  // 工作流生成
  rpc GenerateWorkflow(GenerateWorkflowRequest) returns (GenerateWorkflowResponse);
  rpc RefineWorkflow(RefineWorkflowRequest) returns (RefineWorkflowResponse);
  
  // AI Agent 交互
  rpc ChatWithAgent(AIAgentRequest) returns (AIAgentResponse);
  rpc StreamChatWithAgent(AIAgentRequest) returns (stream AIAgentResponse);
}

// 集成管理服务
service IntegrationService {
  // 集成管理
  rpc GetIntegrations(GetIntegrationsRequest) returns (GetIntegrationsResponse);
  rpc CreateIntegration(CreateIntegrationRequest) returns (CreateIntegrationResponse);
  rpc UpdateIntegration(UpdateIntegrationRequest) returns (UpdateIntegrationResponse);
  rpc DeleteIntegration(DeleteIntegrationRequest) returns (DeleteIntegrationResponse);
  rpc TestIntegration(TestIntegrationRequest) returns (TestIntegrationResponse);
  
  // 工具执行
  rpc ExecuteTool(ToolExecutionRequest) returns (ToolExecutionResponse);
}

// 触发器管理服务
service TriggerService {
  // 触发器管理
  rpc CreateTrigger(CreateTriggerRequest) returns (CreateTriggerResponse);
  rpc GetTrigger(GetTriggerRequest) returns (GetTriggerResponse);
  rpc UpdateTrigger(UpdateTriggerRequest) returns (UpdateTriggerResponse);
  rpc DeleteTrigger(DeleteTriggerRequest) returns (DeleteTriggerResponse);
  rpc ListTriggers(ListTriggersRequest) returns (ListTriggersResponse);
  
  // 触发器事件
  rpc FireTrigger(FireTriggerRequest) returns (FireTriggerResponse);
  rpc GetTriggerEvents(GetTriggerEventsRequest) returns (GetTriggerEventsResponse);
}

// ============================================================================
// 工作流管理请求和响应消息
// ============================================================================

// 创建工作流请求
message CreateWorkflowRequest {
  string name = 1;
  string description = 2;
  repeated Node nodes = 3;
  ConnectionsMap connections = 4;
  WorkflowSettings settings = 5;
  map<string, string> static_data = 6;
  repeated string tags = 7;
  string user_id = 8;
  string session_id = 9;  // 新增：会话ID
}

// 创建工作流响应
message CreateWorkflowResponse {
  Workflow workflow = 1;
  bool success = 2;
  string message = 3;
}

// 获取工作流请求
message GetWorkflowRequest {
  string workflow_id = 1;
  string user_id = 2;
}

// 获取工作流响应
message GetWorkflowResponse {
  Workflow workflow = 1;
  bool found = 2;
  string message = 3;
}

// 更新工作流请求
message UpdateWorkflowRequest {
  string workflow_id = 1;
  string name = 2;
  string description = 3;
  repeated Node nodes = 4;
  ConnectionsMap connections = 5;
  WorkflowSettings settings = 6;
  map<string, string> static_data = 7;
  repeated string tags = 8;
  bool active = 9;
  string user_id = 10;
  string session_id = 11;  // 新增：会话ID
}

// 更新工作流响应
message UpdateWorkflowResponse {
  Workflow workflow = 1;
  bool success = 2;
  string message = 3;
}

// 删除工作流请求
message DeleteWorkflowRequest {
  string workflow_id = 1;
  string user_id = 2;
}

// 删除工作流响应
message DeleteWorkflowResponse {
  bool success = 1;
  string message = 2;
}

// 列出工作流请求
message ListWorkflowsRequest {
  string user_id = 1;
  bool active_only = 2;
  repeated string tags = 3;
  int32 limit = 4;
  int32 offset = 5;
}

// 列出工作流响应
message ListWorkflowsResponse {
  repeated Workflow workflows = 1;
  int32 total_count = 2;
  bool has_more = 3;
}

// ============================================================================
// 触发器管理请求和响应消息
// ============================================================================

// 创建触发器请求
message CreateTriggerRequest {
  TriggerType type = 1;
  string node_name = 2;
  string workflow_id = 3;
  map<string, string> configuration = 4;
  Schedule schedule = 5;
  repeated TriggerCondition conditions = 6;
  string user_id = 7;
}

// 创建触发器响应
message CreateTriggerResponse {
  Trigger trigger = 1;
  bool success = 2;
  string message = 3;
}

// 获取触发器请求
message GetTriggerRequest {
  string trigger_id = 1;
  string user_id = 2;
}

// 获取触发器响应
message GetTriggerResponse {
  Trigger trigger = 1;
  bool found = 2;
  string message = 3;
}

// 更新触发器请求
message UpdateTriggerRequest {
  string trigger_id = 1;
  map<string, string> configuration = 2;
  Schedule schedule = 3;
  repeated TriggerCondition conditions = 4;
  bool active = 5;
  string user_id = 6;
}

// 更新触发器响应
message UpdateTriggerResponse {
  Trigger trigger = 1;
  bool success = 2;
  string message = 3;
}

// 删除触发器请求
message DeleteTriggerRequest {
  string trigger_id = 1;
  string user_id = 2;
}

// 删除触发器响应
message DeleteTriggerResponse {
  bool success = 1;
  string message = 2;
}

// 列出触发器请求
message ListTriggersRequest {
  string workflow_id = 1;
  TriggerType type = 2;
  bool active_only = 3;
  string user_id = 4;
  int32 limit = 5;
  int32 offset = 6;
}

// 列出触发器响应
message ListTriggersResponse {
  repeated Trigger triggers = 1;
  int32 total_count = 2;
  bool has_more = 3;
}

// 触发触发器请求
message FireTriggerRequest {
  string trigger_id = 1;
  map<string, string> event_data = 2;
  string source = 3;
}

// 触发触发器响应
message FireTriggerResponse {
  string event_id = 1;
  string execution_id = 2;
  bool success = 3;
  string message = 4;
}

// 获取触发器事件请求
message GetTriggerEventsRequest {
  string trigger_id = 1;
  TriggerEventStatus status = 2;
  int32 limit = 3;
  int32 offset = 4;
}

// 获取触发器事件响应
message GetTriggerEventsResponse {
  repeated TriggerEvent events = 1;
  int32 total_count = 2;
  bool has_more = 3;
}

// ============================================================================
// 健康检查和状态服务
// ============================================================================

// 健康检查服务
service HealthService {
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
}

// 健康检查请求
message HealthCheckRequest {
  string service = 1;
}

// 健康检查响应
message HealthCheckResponse {
  HealthStatus status = 1;
  string message = 2;
  map<string, string> details = 3;
}

// 健康状态
enum HealthStatus {
  UNKNOWN = 0;
  SERVING = 1;
  NOT_SERVING = 2;
  SERVICE_UNKNOWN = 3;
} 