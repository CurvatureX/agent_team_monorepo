syntax = "proto3";

package proto;

option go_package = "github.com/agent-team/workflow_engine/proto";

// ============================================================================
// 集成系统模块 (Integration System Module)
// ============================================================================

// 第三方集成
message Integration {
  string integration_id = 1;
  string integration_type = 2;    // google_calendar, slack, github, etc.
  string name = 3;
  string version = 4;
  map<string, string> configuration = 5;
  CredentialConfig credentials = 6;
  repeated string supported_operations = 7;
  bool active = 8;
  int64 created_at = 9;
  int64 updated_at = 10;
}

// 凭证配置
message CredentialConfig {
  string credential_type = 1;     // oauth2, api_key, basic_auth
  string credential_id = 2;
  map<string, string> credential_data = 3;
  int64 expires_at = 4;
  bool is_valid = 5;
}

// OAuth2 凭证
message OAuth2Credential {
  string access_token = 1;
  string refresh_token = 2;
  string token_type = 3;
  int64 expires_at = 4;
  string scope = 5;
  map<string, string> additional_data = 6;
}

// API Key 凭证
message APIKeyCredential {
  string api_key = 1;
  string key_name = 2;
  string key_location = 3;        // header, query, body
  map<string, string> additional_headers = 4;
}

// 基础认证凭证
message BasicAuthCredential {
  string username = 1;
  string password = 2;
  map<string, string> additional_data = 3;
}

// ============================================================================
// 触发器模块 (Trigger Module)
// ============================================================================

// 触发器定义
message Trigger {
  string trigger_id = 1;
  TriggerType type = 2;
  string node_name = 3;
  string workflow_id = 4;
  map<string, string> configuration = 5;
  bool active = 6;
  Schedule schedule = 7;
  repeated TriggerCondition conditions = 8;
  int64 created_at = 9;
  int64 updated_at = 10;
}

// 触发器类型
enum TriggerType {
  TRIGGER_TYPE_WEBHOOK = 0;
  TRIGGER_TYPE_CRON = 1;
  TRIGGER_TYPE_MANUAL = 2;
  TRIGGER_TYPE_EMAIL = 3;
  TRIGGER_TYPE_FORM = 4;
  TRIGGER_TYPE_CALENDAR = 5;
  TRIGGER_TYPE_CHAT = 6;
  TRIGGER_TYPE_FILE_CHANGE = 7;
  TRIGGER_TYPE_DATABASE_CHANGE = 8;
}

// 调度配置
message Schedule {
  string cron_expression = 1;
  string timezone = 2;
  int64 next_execution = 3;
  int64 last_execution = 4;
  bool enabled = 5;
}

// 触发条件
message TriggerCondition {
  string field = 1;
  string operator = 2;           // equals, contains, greater_than, etc.
  string value = 3;
  string data_type = 4;          // string, number, boolean, date
}

// 触发器事件
message TriggerEvent {
  string event_id = 1;
  string trigger_id = 2;
  string workflow_id = 3;
  int64 timestamp = 4;
  map<string, string> event_data = 5;
  TriggerEventStatus status = 6;
  string error_message = 7;
}

// 触发器事件状态
enum TriggerEventStatus {
  PENDING = 0;
  PROCESSING = 1;
  COMPLETED = 2;
  FAILED = 3;
  IGNORED = 4;
}

// ============================================================================
// 工具和 MCP 集成
// ============================================================================

// MCP 工具配置
message MCPToolConfig {
  string mcp_server_url = 1;
  string tool_name = 2;
  string tool_version = 3;
  map<string, string> server_config = 4;
  map<string, string> tool_parameters = 5;
  CredentialConfig credentials = 6;
  bool enabled = 7;
}

// 工具操作定义
message ToolOperation {
  string operation_id = 1;
  string operation_name = 2;
  string description = 3;
  string input_schema = 4;        // JSON schema
  string output_schema = 5;       // JSON schema
  map<string, string> parameters = 6;
  bool requires_auth = 7;
}

// 工具执行请求
message ToolExecutionRequest {
  string tool_name = 1;
  string operation_name = 2;
  map<string, string> input_data = 3;
  map<string, string> context = 4;
  CredentialConfig credentials = 5;
}

// 工具执行响应
message ToolExecutionResponse {
  bool success = 1;
  map<string, string> output_data = 2;
  string error_message = 3;
  int64 execution_time_ms = 4;
  map<string, string> metadata = 5;
}

// ============================================================================
// 集成管理 API
// ============================================================================

// 获取集成列表请求
message GetIntegrationsRequest {
  string integration_type = 1;
  bool active_only = 2;
  int32 limit = 3;
  int32 offset = 4;
}

// 获取集成列表响应
message GetIntegrationsResponse {
  repeated Integration integrations = 1;
  int32 total_count = 2;
  bool has_more = 3;
}

// 创建集成请求
message CreateIntegrationRequest {
  string integration_type = 1;
  string name = 2;
  map<string, string> configuration = 3;
  CredentialConfig credentials = 4;
}

// 创建集成响应
message CreateIntegrationResponse {
  Integration integration = 1;
  bool success = 2;
  string message = 3;
}

// 更新集成请求
message UpdateIntegrationRequest {
  string integration_id = 1;
  string name = 2;
  map<string, string> configuration = 3;
  CredentialConfig credentials = 4;
  bool active = 5;
}

// 更新集成响应
message UpdateIntegrationResponse {
  Integration integration = 1;
  bool success = 2;
  string message = 3;
}

// 删除集成请求
message DeleteIntegrationRequest {
  string integration_id = 1;
}

// 删除集成响应
message DeleteIntegrationResponse {
  bool success = 1;
  string message = 2;
}

// 测试集成请求
message TestIntegrationRequest {
  string integration_id = 1;
  string test_operation = 2;
  map<string, string> test_data = 3;
}

// 测试集成响应
message TestIntegrationResponse {
  bool success = 1;
  string message = 2;
  map<string, string> test_result = 3;
  int64 response_time_ms = 4;
} 