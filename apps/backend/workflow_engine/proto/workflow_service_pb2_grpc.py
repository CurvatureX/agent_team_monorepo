# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from . import ai_system_pb2 as ai__system__pb2
from . import execution_pb2 as execution__pb2
from . import integration_pb2 as integration__pb2
from . import workflow_service_pb2 as workflow__service__pb2

GRPC_GENERATED_VERSION = '1.74.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in workflow_service_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class WorkflowServiceStub(object):
    """============================================================================
    工作流引擎 gRPC 服务定义
    ============================================================================

    工作流管理服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateWorkflow = channel.unary_unary(
                '/proto.WorkflowService/CreateWorkflow',
                request_serializer=workflow__service__pb2.CreateWorkflowRequest.SerializeToString,
                response_deserializer=workflow__service__pb2.CreateWorkflowResponse.FromString,
                _registered_method=True)
        self.GetWorkflow = channel.unary_unary(
                '/proto.WorkflowService/GetWorkflow',
                request_serializer=workflow__service__pb2.GetWorkflowRequest.SerializeToString,
                response_deserializer=workflow__service__pb2.GetWorkflowResponse.FromString,
                _registered_method=True)
        self.UpdateWorkflow = channel.unary_unary(
                '/proto.WorkflowService/UpdateWorkflow',
                request_serializer=workflow__service__pb2.UpdateWorkflowRequest.SerializeToString,
                response_deserializer=workflow__service__pb2.UpdateWorkflowResponse.FromString,
                _registered_method=True)
        self.DeleteWorkflow = channel.unary_unary(
                '/proto.WorkflowService/DeleteWorkflow',
                request_serializer=workflow__service__pb2.DeleteWorkflowRequest.SerializeToString,
                response_deserializer=workflow__service__pb2.DeleteWorkflowResponse.FromString,
                _registered_method=True)
        self.ListWorkflows = channel.unary_unary(
                '/proto.WorkflowService/ListWorkflows',
                request_serializer=workflow__service__pb2.ListWorkflowsRequest.SerializeToString,
                response_deserializer=workflow__service__pb2.ListWorkflowsResponse.FromString,
                _registered_method=True)
        self.ExecuteWorkflow = channel.unary_unary(
                '/proto.WorkflowService/ExecuteWorkflow',
                request_serializer=execution__pb2.ExecuteWorkflowRequest.SerializeToString,
                response_deserializer=execution__pb2.ExecuteWorkflowResponse.FromString,
                _registered_method=True)
        self.GetExecutionStatus = channel.unary_unary(
                '/proto.WorkflowService/GetExecutionStatus',
                request_serializer=execution__pb2.GetExecutionStatusRequest.SerializeToString,
                response_deserializer=execution__pb2.GetExecutionStatusResponse.FromString,
                _registered_method=True)
        self.CancelExecution = channel.unary_unary(
                '/proto.WorkflowService/CancelExecution',
                request_serializer=execution__pb2.CancelExecutionRequest.SerializeToString,
                response_deserializer=execution__pb2.CancelExecutionResponse.FromString,
                _registered_method=True)
        self.GetExecutionHistory = channel.unary_unary(
                '/proto.WorkflowService/GetExecutionHistory',
                request_serializer=execution__pb2.GetExecutionHistoryRequest.SerializeToString,
                response_deserializer=execution__pb2.GetExecutionHistoryResponse.FromString,
                _registered_method=True)
        self.ValidateWorkflow = channel.unary_unary(
                '/proto.WorkflowService/ValidateWorkflow',
                request_serializer=ai__system__pb2.ValidateWorkflowRequest.SerializeToString,
                response_deserializer=ai__system__pb2.ValidateWorkflowResponse.FromString,
                _registered_method=True)
        self.TestNode = channel.unary_unary(
                '/proto.WorkflowService/TestNode',
                request_serializer=ai__system__pb2.TestNodeRequest.SerializeToString,
                response_deserializer=ai__system__pb2.TestNodeResponse.FromString,
                _registered_method=True)


class WorkflowServiceServicer(object):
    """============================================================================
    工作流引擎 gRPC 服务定义
    ============================================================================

    工作流管理服务
    """

    def CreateWorkflow(self, request, context):
        """工作流 CRUD 操作
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetWorkflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateWorkflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteWorkflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListWorkflows(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteWorkflow(self, request, context):
        """工作流执行
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExecutionStatus(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CancelExecution(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetExecutionHistory(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ValidateWorkflow(self, request, context):
        """工作流验证和调试
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestNode(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkflowServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateWorkflow,
                    request_deserializer=workflow__service__pb2.CreateWorkflowRequest.FromString,
                    response_serializer=workflow__service__pb2.CreateWorkflowResponse.SerializeToString,
            ),
            'GetWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.GetWorkflow,
                    request_deserializer=workflow__service__pb2.GetWorkflowRequest.FromString,
                    response_serializer=workflow__service__pb2.GetWorkflowResponse.SerializeToString,
            ),
            'UpdateWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateWorkflow,
                    request_deserializer=workflow__service__pb2.UpdateWorkflowRequest.FromString,
                    response_serializer=workflow__service__pb2.UpdateWorkflowResponse.SerializeToString,
            ),
            'DeleteWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteWorkflow,
                    request_deserializer=workflow__service__pb2.DeleteWorkflowRequest.FromString,
                    response_serializer=workflow__service__pb2.DeleteWorkflowResponse.SerializeToString,
            ),
            'ListWorkflows': grpc.unary_unary_rpc_method_handler(
                    servicer.ListWorkflows,
                    request_deserializer=workflow__service__pb2.ListWorkflowsRequest.FromString,
                    response_serializer=workflow__service__pb2.ListWorkflowsResponse.SerializeToString,
            ),
            'ExecuteWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteWorkflow,
                    request_deserializer=execution__pb2.ExecuteWorkflowRequest.FromString,
                    response_serializer=execution__pb2.ExecuteWorkflowResponse.SerializeToString,
            ),
            'GetExecutionStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExecutionStatus,
                    request_deserializer=execution__pb2.GetExecutionStatusRequest.FromString,
                    response_serializer=execution__pb2.GetExecutionStatusResponse.SerializeToString,
            ),
            'CancelExecution': grpc.unary_unary_rpc_method_handler(
                    servicer.CancelExecution,
                    request_deserializer=execution__pb2.CancelExecutionRequest.FromString,
                    response_serializer=execution__pb2.CancelExecutionResponse.SerializeToString,
            ),
            'GetExecutionHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.GetExecutionHistory,
                    request_deserializer=execution__pb2.GetExecutionHistoryRequest.FromString,
                    response_serializer=execution__pb2.GetExecutionHistoryResponse.SerializeToString,
            ),
            'ValidateWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.ValidateWorkflow,
                    request_deserializer=ai__system__pb2.ValidateWorkflowRequest.FromString,
                    response_serializer=ai__system__pb2.ValidateWorkflowResponse.SerializeToString,
            ),
            'TestNode': grpc.unary_unary_rpc_method_handler(
                    servicer.TestNode,
                    request_deserializer=ai__system__pb2.TestNodeRequest.FromString,
                    response_serializer=ai__system__pb2.TestNodeResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.WorkflowService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('proto.WorkflowService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class WorkflowService(object):
    """============================================================================
    工作流引擎 gRPC 服务定义
    ============================================================================

    工作流管理服务
    """

    @staticmethod
    def CreateWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.WorkflowService/CreateWorkflow',
            workflow__service__pb2.CreateWorkflowRequest.SerializeToString,
            workflow__service__pb2.CreateWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.WorkflowService/GetWorkflow',
            workflow__service__pb2.GetWorkflowRequest.SerializeToString,
            workflow__service__pb2.GetWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.WorkflowService/UpdateWorkflow',
            workflow__service__pb2.UpdateWorkflowRequest.SerializeToString,
            workflow__service__pb2.UpdateWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.WorkflowService/DeleteWorkflow',
            workflow__service__pb2.DeleteWorkflowRequest.SerializeToString,
            workflow__service__pb2.DeleteWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListWorkflows(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.WorkflowService/ListWorkflows',
            workflow__service__pb2.ListWorkflowsRequest.SerializeToString,
            workflow__service__pb2.ListWorkflowsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.WorkflowService/ExecuteWorkflow',
            execution__pb2.ExecuteWorkflowRequest.SerializeToString,
            execution__pb2.ExecuteWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetExecutionStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.WorkflowService/GetExecutionStatus',
            execution__pb2.GetExecutionStatusRequest.SerializeToString,
            execution__pb2.GetExecutionStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CancelExecution(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.WorkflowService/CancelExecution',
            execution__pb2.CancelExecutionRequest.SerializeToString,
            execution__pb2.CancelExecutionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetExecutionHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.WorkflowService/GetExecutionHistory',
            execution__pb2.GetExecutionHistoryRequest.SerializeToString,
            execution__pb2.GetExecutionHistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ValidateWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.WorkflowService/ValidateWorkflow',
            ai__system__pb2.ValidateWorkflowRequest.SerializeToString,
            ai__system__pb2.ValidateWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TestNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.WorkflowService/TestNode',
            ai__system__pb2.TestNodeRequest.SerializeToString,
            ai__system__pb2.TestNodeResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AIAgentServiceStub(object):
    """AI Agent 服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GenerateWorkflow = channel.unary_unary(
                '/proto.AIAgentService/GenerateWorkflow',
                request_serializer=ai__system__pb2.GenerateWorkflowRequest.SerializeToString,
                response_deserializer=ai__system__pb2.GenerateWorkflowResponse.FromString,
                _registered_method=True)
        self.RefineWorkflow = channel.unary_unary(
                '/proto.AIAgentService/RefineWorkflow',
                request_serializer=ai__system__pb2.RefineWorkflowRequest.SerializeToString,
                response_deserializer=ai__system__pb2.RefineWorkflowResponse.FromString,
                _registered_method=True)
        self.ChatWithAgent = channel.unary_unary(
                '/proto.AIAgentService/ChatWithAgent',
                request_serializer=ai__system__pb2.AIAgentRequest.SerializeToString,
                response_deserializer=ai__system__pb2.AIAgentResponse.FromString,
                _registered_method=True)
        self.StreamChatWithAgent = channel.unary_stream(
                '/proto.AIAgentService/StreamChatWithAgent',
                request_serializer=ai__system__pb2.AIAgentRequest.SerializeToString,
                response_deserializer=ai__system__pb2.AIAgentResponse.FromString,
                _registered_method=True)


class AIAgentServiceServicer(object):
    """AI Agent 服务
    """

    def GenerateWorkflow(self, request, context):
        """工作流生成
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefineWorkflow(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ChatWithAgent(self, request, context):
        """AI Agent 交互
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def StreamChatWithAgent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AIAgentServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GenerateWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.GenerateWorkflow,
                    request_deserializer=ai__system__pb2.GenerateWorkflowRequest.FromString,
                    response_serializer=ai__system__pb2.GenerateWorkflowResponse.SerializeToString,
            ),
            'RefineWorkflow': grpc.unary_unary_rpc_method_handler(
                    servicer.RefineWorkflow,
                    request_deserializer=ai__system__pb2.RefineWorkflowRequest.FromString,
                    response_serializer=ai__system__pb2.RefineWorkflowResponse.SerializeToString,
            ),
            'ChatWithAgent': grpc.unary_unary_rpc_method_handler(
                    servicer.ChatWithAgent,
                    request_deserializer=ai__system__pb2.AIAgentRequest.FromString,
                    response_serializer=ai__system__pb2.AIAgentResponse.SerializeToString,
            ),
            'StreamChatWithAgent': grpc.unary_stream_rpc_method_handler(
                    servicer.StreamChatWithAgent,
                    request_deserializer=ai__system__pb2.AIAgentRequest.FromString,
                    response_serializer=ai__system__pb2.AIAgentResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.AIAgentService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('proto.AIAgentService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AIAgentService(object):
    """AI Agent 服务
    """

    @staticmethod
    def GenerateWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.AIAgentService/GenerateWorkflow',
            ai__system__pb2.GenerateWorkflowRequest.SerializeToString,
            ai__system__pb2.GenerateWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RefineWorkflow(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.AIAgentService/RefineWorkflow',
            ai__system__pb2.RefineWorkflowRequest.SerializeToString,
            ai__system__pb2.RefineWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ChatWithAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.AIAgentService/ChatWithAgent',
            ai__system__pb2.AIAgentRequest.SerializeToString,
            ai__system__pb2.AIAgentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def StreamChatWithAgent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/proto.AIAgentService/StreamChatWithAgent',
            ai__system__pb2.AIAgentRequest.SerializeToString,
            ai__system__pb2.AIAgentResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class IntegrationServiceStub(object):
    """集成管理服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetIntegrations = channel.unary_unary(
                '/proto.IntegrationService/GetIntegrations',
                request_serializer=integration__pb2.GetIntegrationsRequest.SerializeToString,
                response_deserializer=integration__pb2.GetIntegrationsResponse.FromString,
                _registered_method=True)
        self.CreateIntegration = channel.unary_unary(
                '/proto.IntegrationService/CreateIntegration',
                request_serializer=integration__pb2.CreateIntegrationRequest.SerializeToString,
                response_deserializer=integration__pb2.CreateIntegrationResponse.FromString,
                _registered_method=True)
        self.UpdateIntegration = channel.unary_unary(
                '/proto.IntegrationService/UpdateIntegration',
                request_serializer=integration__pb2.UpdateIntegrationRequest.SerializeToString,
                response_deserializer=integration__pb2.UpdateIntegrationResponse.FromString,
                _registered_method=True)
        self.DeleteIntegration = channel.unary_unary(
                '/proto.IntegrationService/DeleteIntegration',
                request_serializer=integration__pb2.DeleteIntegrationRequest.SerializeToString,
                response_deserializer=integration__pb2.DeleteIntegrationResponse.FromString,
                _registered_method=True)
        self.TestIntegration = channel.unary_unary(
                '/proto.IntegrationService/TestIntegration',
                request_serializer=integration__pb2.TestIntegrationRequest.SerializeToString,
                response_deserializer=integration__pb2.TestIntegrationResponse.FromString,
                _registered_method=True)
        self.ExecuteTool = channel.unary_unary(
                '/proto.IntegrationService/ExecuteTool',
                request_serializer=integration__pb2.ToolExecutionRequest.SerializeToString,
                response_deserializer=integration__pb2.ToolExecutionResponse.FromString,
                _registered_method=True)


class IntegrationServiceServicer(object):
    """集成管理服务
    """

    def GetIntegrations(self, request, context):
        """集成管理
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CreateIntegration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateIntegration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteIntegration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def TestIntegration(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteTool(self, request, context):
        """工具执行
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_IntegrationServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetIntegrations': grpc.unary_unary_rpc_method_handler(
                    servicer.GetIntegrations,
                    request_deserializer=integration__pb2.GetIntegrationsRequest.FromString,
                    response_serializer=integration__pb2.GetIntegrationsResponse.SerializeToString,
            ),
            'CreateIntegration': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateIntegration,
                    request_deserializer=integration__pb2.CreateIntegrationRequest.FromString,
                    response_serializer=integration__pb2.CreateIntegrationResponse.SerializeToString,
            ),
            'UpdateIntegration': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateIntegration,
                    request_deserializer=integration__pb2.UpdateIntegrationRequest.FromString,
                    response_serializer=integration__pb2.UpdateIntegrationResponse.SerializeToString,
            ),
            'DeleteIntegration': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteIntegration,
                    request_deserializer=integration__pb2.DeleteIntegrationRequest.FromString,
                    response_serializer=integration__pb2.DeleteIntegrationResponse.SerializeToString,
            ),
            'TestIntegration': grpc.unary_unary_rpc_method_handler(
                    servicer.TestIntegration,
                    request_deserializer=integration__pb2.TestIntegrationRequest.FromString,
                    response_serializer=integration__pb2.TestIntegrationResponse.SerializeToString,
            ),
            'ExecuteTool': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteTool,
                    request_deserializer=integration__pb2.ToolExecutionRequest.FromString,
                    response_serializer=integration__pb2.ToolExecutionResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.IntegrationService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('proto.IntegrationService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class IntegrationService(object):
    """集成管理服务
    """

    @staticmethod
    def GetIntegrations(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.IntegrationService/GetIntegrations',
            integration__pb2.GetIntegrationsRequest.SerializeToString,
            integration__pb2.GetIntegrationsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CreateIntegration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.IntegrationService/CreateIntegration',
            integration__pb2.CreateIntegrationRequest.SerializeToString,
            integration__pb2.CreateIntegrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateIntegration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.IntegrationService/UpdateIntegration',
            integration__pb2.UpdateIntegrationRequest.SerializeToString,
            integration__pb2.UpdateIntegrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteIntegration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.IntegrationService/DeleteIntegration',
            integration__pb2.DeleteIntegrationRequest.SerializeToString,
            integration__pb2.DeleteIntegrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def TestIntegration(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.IntegrationService/TestIntegration',
            integration__pb2.TestIntegrationRequest.SerializeToString,
            integration__pb2.TestIntegrationResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ExecuteTool(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.IntegrationService/ExecuteTool',
            integration__pb2.ToolExecutionRequest.SerializeToString,
            integration__pb2.ToolExecutionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class TriggerServiceStub(object):
    """触发器管理服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.CreateTrigger = channel.unary_unary(
                '/proto.TriggerService/CreateTrigger',
                request_serializer=workflow__service__pb2.CreateTriggerRequest.SerializeToString,
                response_deserializer=workflow__service__pb2.CreateTriggerResponse.FromString,
                _registered_method=True)
        self.GetTrigger = channel.unary_unary(
                '/proto.TriggerService/GetTrigger',
                request_serializer=workflow__service__pb2.GetTriggerRequest.SerializeToString,
                response_deserializer=workflow__service__pb2.GetTriggerResponse.FromString,
                _registered_method=True)
        self.UpdateTrigger = channel.unary_unary(
                '/proto.TriggerService/UpdateTrigger',
                request_serializer=workflow__service__pb2.UpdateTriggerRequest.SerializeToString,
                response_deserializer=workflow__service__pb2.UpdateTriggerResponse.FromString,
                _registered_method=True)
        self.DeleteTrigger = channel.unary_unary(
                '/proto.TriggerService/DeleteTrigger',
                request_serializer=workflow__service__pb2.DeleteTriggerRequest.SerializeToString,
                response_deserializer=workflow__service__pb2.DeleteTriggerResponse.FromString,
                _registered_method=True)
        self.ListTriggers = channel.unary_unary(
                '/proto.TriggerService/ListTriggers',
                request_serializer=workflow__service__pb2.ListTriggersRequest.SerializeToString,
                response_deserializer=workflow__service__pb2.ListTriggersResponse.FromString,
                _registered_method=True)
        self.FireTrigger = channel.unary_unary(
                '/proto.TriggerService/FireTrigger',
                request_serializer=workflow__service__pb2.FireTriggerRequest.SerializeToString,
                response_deserializer=workflow__service__pb2.FireTriggerResponse.FromString,
                _registered_method=True)
        self.GetTriggerEvents = channel.unary_unary(
                '/proto.TriggerService/GetTriggerEvents',
                request_serializer=workflow__service__pb2.GetTriggerEventsRequest.SerializeToString,
                response_deserializer=workflow__service__pb2.GetTriggerEventsResponse.FromString,
                _registered_method=True)


class TriggerServiceServicer(object):
    """触发器管理服务
    """

    def CreateTrigger(self, request, context):
        """触发器管理
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def UpdateTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteTrigger(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListTriggers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def FireTrigger(self, request, context):
        """触发器事件
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTriggerEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TriggerServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'CreateTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.CreateTrigger,
                    request_deserializer=workflow__service__pb2.CreateTriggerRequest.FromString,
                    response_serializer=workflow__service__pb2.CreateTriggerResponse.SerializeToString,
            ),
            'GetTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTrigger,
                    request_deserializer=workflow__service__pb2.GetTriggerRequest.FromString,
                    response_serializer=workflow__service__pb2.GetTriggerResponse.SerializeToString,
            ),
            'UpdateTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateTrigger,
                    request_deserializer=workflow__service__pb2.UpdateTriggerRequest.FromString,
                    response_serializer=workflow__service__pb2.UpdateTriggerResponse.SerializeToString,
            ),
            'DeleteTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteTrigger,
                    request_deserializer=workflow__service__pb2.DeleteTriggerRequest.FromString,
                    response_serializer=workflow__service__pb2.DeleteTriggerResponse.SerializeToString,
            ),
            'ListTriggers': grpc.unary_unary_rpc_method_handler(
                    servicer.ListTriggers,
                    request_deserializer=workflow__service__pb2.ListTriggersRequest.FromString,
                    response_serializer=workflow__service__pb2.ListTriggersResponse.SerializeToString,
            ),
            'FireTrigger': grpc.unary_unary_rpc_method_handler(
                    servicer.FireTrigger,
                    request_deserializer=workflow__service__pb2.FireTriggerRequest.FromString,
                    response_serializer=workflow__service__pb2.FireTriggerResponse.SerializeToString,
            ),
            'GetTriggerEvents': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTriggerEvents,
                    request_deserializer=workflow__service__pb2.GetTriggerEventsRequest.FromString,
                    response_serializer=workflow__service__pb2.GetTriggerEventsResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.TriggerService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('proto.TriggerService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class TriggerService(object):
    """触发器管理服务
    """

    @staticmethod
    def CreateTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TriggerService/CreateTrigger',
            workflow__service__pb2.CreateTriggerRequest.SerializeToString,
            workflow__service__pb2.CreateTriggerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TriggerService/GetTrigger',
            workflow__service__pb2.GetTriggerRequest.SerializeToString,
            workflow__service__pb2.GetTriggerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def UpdateTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TriggerService/UpdateTrigger',
            workflow__service__pb2.UpdateTriggerRequest.SerializeToString,
            workflow__service__pb2.UpdateTriggerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def DeleteTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TriggerService/DeleteTrigger',
            workflow__service__pb2.DeleteTriggerRequest.SerializeToString,
            workflow__service__pb2.DeleteTriggerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def ListTriggers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TriggerService/ListTriggers',
            workflow__service__pb2.ListTriggersRequest.SerializeToString,
            workflow__service__pb2.ListTriggersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def FireTrigger(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TriggerService/FireTrigger',
            workflow__service__pb2.FireTriggerRequest.SerializeToString,
            workflow__service__pb2.FireTriggerResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetTriggerEvents(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.TriggerService/GetTriggerEvents',
            workflow__service__pb2.GetTriggerEventsRequest.SerializeToString,
            workflow__service__pb2.GetTriggerEventsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class HealthServiceStub(object):
    """============================================================================
    健康检查和状态服务
    ============================================================================

    健康检查服务
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Check = channel.unary_unary(
                '/proto.HealthService/Check',
                request_serializer=workflow__service__pb2.HealthCheckRequest.SerializeToString,
                response_deserializer=workflow__service__pb2.HealthCheckResponse.FromString,
                _registered_method=True)


class HealthServiceServicer(object):
    """============================================================================
    健康检查和状态服务
    ============================================================================

    健康检查服务
    """

    def Check(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_HealthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Check': grpc.unary_unary_rpc_method_handler(
                    servicer.Check,
                    request_deserializer=workflow__service__pb2.HealthCheckRequest.FromString,
                    response_serializer=workflow__service__pb2.HealthCheckResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'proto.HealthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('proto.HealthService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class HealthService(object):
    """============================================================================
    健康检查和状态服务
    ============================================================================

    健康检查服务
    """

    @staticmethod
    def Check(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/proto.HealthService/Check',
            workflow__service__pb2.HealthCheckRequest.SerializeToString,
            workflow__service__pb2.HealthCheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
