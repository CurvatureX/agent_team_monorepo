# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import execution_pb2 as execution__pb2
import grpc


class ExecutionServiceStub(object):
    """============================================================================
    执行服务 (Execution Service)
    ============================================================================

    执行服务定义
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ExecuteWorkflow = channel.unary_unary(
            "/proto.ExecutionService/ExecuteWorkflow",
            request_serializer=execution__pb2.ExecuteWorkflowRequest.SerializeToString,
            response_deserializer=execution__pb2.ExecuteWorkflowResponse.FromString,
        )
        self.GetExecutionStatus = channel.unary_unary(
            "/proto.ExecutionService/GetExecutionStatus",
            request_serializer=execution__pb2.GetExecutionStatusRequest.SerializeToString,
            response_deserializer=execution__pb2.GetExecutionStatusResponse.FromString,
        )
        self.CancelExecution = channel.unary_unary(
            "/proto.ExecutionService/CancelExecution",
            request_serializer=execution__pb2.CancelExecutionRequest.SerializeToString,
            response_deserializer=execution__pb2.CancelExecutionResponse.FromString,
        )
        self.GetExecutionHistory = channel.unary_unary(
            "/proto.ExecutionService/GetExecutionHistory",
            request_serializer=execution__pb2.GetExecutionHistoryRequest.SerializeToString,
            response_deserializer=execution__pb2.GetExecutionHistoryResponse.FromString,
        )


class ExecutionServiceServicer(object):
    """============================================================================
    执行服务 (Execution Service)
    ============================================================================

    执行服务定义
    """

    def ExecuteWorkflow(self, request, context):
        """执行工作流"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetExecutionStatus(self, request, context):
        """获取执行状态"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def CancelExecution(self, request, context):
        """取消执行"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetExecutionHistory(self, request, context):
        """获取执行历史"""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_ExecutionServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "ExecuteWorkflow": grpc.unary_unary_rpc_method_handler(
            servicer.ExecuteWorkflow,
            request_deserializer=execution__pb2.ExecuteWorkflowRequest.FromString,
            response_serializer=execution__pb2.ExecuteWorkflowResponse.SerializeToString,
        ),
        "GetExecutionStatus": grpc.unary_unary_rpc_method_handler(
            servicer.GetExecutionStatus,
            request_deserializer=execution__pb2.GetExecutionStatusRequest.FromString,
            response_serializer=execution__pb2.GetExecutionStatusResponse.SerializeToString,
        ),
        "CancelExecution": grpc.unary_unary_rpc_method_handler(
            servicer.CancelExecution,
            request_deserializer=execution__pb2.CancelExecutionRequest.FromString,
            response_serializer=execution__pb2.CancelExecutionResponse.SerializeToString,
        ),
        "GetExecutionHistory": grpc.unary_unary_rpc_method_handler(
            servicer.GetExecutionHistory,
            request_deserializer=execution__pb2.GetExecutionHistoryRequest.FromString,
            response_serializer=execution__pb2.GetExecutionHistoryResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "proto.ExecutionService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class ExecutionService(object):
    """============================================================================
    执行服务 (Execution Service)
    ============================================================================

    执行服务定义
    """

    @staticmethod
    def ExecuteWorkflow(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/proto.ExecutionService/ExecuteWorkflow",
            execution__pb2.ExecuteWorkflowRequest.SerializeToString,
            execution__pb2.ExecuteWorkflowResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetExecutionStatus(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/proto.ExecutionService/GetExecutionStatus",
            execution__pb2.GetExecutionStatusRequest.SerializeToString,
            execution__pb2.GetExecutionStatusResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def CancelExecution(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/proto.ExecutionService/CancelExecution",
            execution__pb2.CancelExecutionRequest.SerializeToString,
            execution__pb2.CancelExecutionResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetExecutionHistory(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/proto.ExecutionService/GetExecutionHistory",
            execution__pb2.GetExecutionHistoryRequest.SerializeToString,
            execution__pb2.GetExecutionHistoryResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
