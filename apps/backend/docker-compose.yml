services:
  # ======================
  # Infrastructure Services
  # ======================

  # Redis - Shared cache for API Gateway rate limiting, JWT caching, and Workflow Agent state
  redis:
    image: redis:7-alpine
    container_name: agent-team-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - agent-team-network

  # Note: Using Supabase as primary database - no local PostgreSQL needed
  # All services connect directly to Supabase for data persistence and user management

  # Redis Commander - Redis management UI (development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: agent-team-redis-ui
    profiles: ["dev", "development"]
    ports:
      - "8081:8081"
    environment:
      REDIS_HOSTS: "production:redis:6379"
      HTTP_USER: "admin"
      HTTP_PASSWORD: "${REDIS_UI_PASSWORD:-admin123}"
      HTTP_AUTH: "true"
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - agent-team-network

  # ======================
  # Observability Stack (development only)
  # ======================

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: agent-team-otel-collector
    profiles: ["dev", "development", "observability"]
    command: ["--config", "/etc/otel-collector-config.yaml"]
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8889:8889"   # Prometheus metrics
    depends_on:
      - jaeger
    restart: unless-stopped
    networks:
      - agent-team-network

  # Jaeger for trace visualization
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: agent-team-jaeger
    profiles: ["dev", "development", "observability"]
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14250:14250"  # gRPC

    restart: unless-stopped
    networks:
      - agent-team-network

  # ======================
  # Backend Services (FastAPI)
  # ======================

  # Workflow Agent - AI workflow consultant (FastAPI service on port 8001)
  workflow-agent:
    build:
      context: .
      dockerfile: ./workflow_agent/Dockerfile
      target: production
      args:
        - PYTHON_VERSION=3.11
        - BUILDKIT_PROGRESS=plain
    container_name: agent-team-workflow-agent
    ports:
      - "8001:8001" # FastAPI port
    env_file:
      - ./.env
    environment:
      # Override specific settings
      PYTHONPATH: "/app"
      PYTHONUNBUFFERED: "1"
      REDIS_URL: "redis://redis:6379/0"
      SERVICE_NAME: "workflow-agent"
      # Workflow Engine URL for debug node integration
      WORKFLOW_ENGINE_URL: "http://workflow-engine:8002"
      # OpenTelemetry configuration
      # OTEL_SDK_DISABLED: "true"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      OTEL_EXPORTER_OTLP_INSECURE: "true"
      OTEL_SERVICE_NAME: "workflow-agent"
      OTEL_RESOURCE_ATTRIBUTES: "service.namespace=agent-team,deployment.environment=development"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./shared/proto:/app/shared/proto:ro
      - workflow_agent_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    restart: unless-stopped
    networks:
      - agent-team-network

  # Workflow Engine - Workflow execution engine (FastAPI service on port 8002)
  workflow-engine:
    dns:
      - 1.1.1.1
      - 8.8.8.8
    build:
      context: .
      dockerfile: ./workflow_engine/Dockerfile
      target: production
    container_name: agent-team-workflow-engine
    ports:
      - "8002:8002"
    env_file:
      - ./.env
    environment:
      # Override specific settings
      PYTHONPATH: "/app"
      PYTHONUNBUFFERED: "1"
      REDIS_URL: "redis://redis:6379/0"
      SERVICE_NAME: "workflow-engine"
      # OpenTelemetry configuration
      # OTEL_SDK_DISABLED: "true"
      OTEL_EXPORTER_OTLP_ENDPOINT: "http://otel-collector:4317"
      OTEL_EXPORTER_OTLP_INSECURE: "true"
      OTEL_SERVICE_NAME: "workflow-engine"
      OTEL_RESOURCE_ATTRIBUTES: "service.namespace=agent-team,deployment.environment=development"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - ./shared:/app/shared:ro
      - workflow_engine_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 45s # FastAPI starts faster than gRPC
    restart: unless-stopped
    networks:
      - agent-team-network

  # Workflow Scheduler - Workflow trigger management (FastAPI service on port 8003)
  workflow-scheduler:
    dns:
      - 1.1.1.1
      - 8.8.8.8
    build:
      context: .
      dockerfile: ./workflow_scheduler/Dockerfile
    container_name: agent-team-workflow-scheduler
    ports:
      - "8003:8003"
    env_file:
      - ./.env
    environment:
      # Override specific settings
      PYTHONPATH: "/app"
      PYTHONUNBUFFERED: "1"
      redis_url: "redis://redis:6379/1"  # Use different Redis DB
      SERVICE_NAME: "workflow-scheduler"
      # Service URLs for internal communication
      WORKFLOW_ENGINE_URL: "http://workflow-engine:8002"
      API_GATEWAY_URL: "http://api-gateway:8000"
    depends_on:
      redis:
        condition: service_healthy
    volumes:
      - workflow_scheduler_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s # Scheduler needs time to initialize triggers
    restart: unless-stopped
    networks:
      - agent-team-network

  # ======================
  # Frontend Gateway (HTTP)
  # ======================

  # API Gateway - Three-layer FastAPI service (HTTP on port 8000)
  api-gateway:
    build:
      context: .
      dockerfile: ./api-gateway/Dockerfile
      args:
        - BUILDKIT_PROGRESS=plain
    container_name: api_gateway_service
    user: "1000:1000"
    ports:
      - "8000:8000"
    env_file:
      - ./.env
    environment:
      # HTTP client configuration (replacing gRPC)
      - WORKFLOW_ENGINE_HOST=workflow-engine
      - WORKFLOW_ENGINE_PORT=8002
      - WORKFLOW_AGENT_HOST=workflow-agent
      - WORKFLOW_AGENT_PORT=8001
      - WORKFLOW_SCHEDULER_HOST=workflow-scheduler
      - WORKFLOW_SCHEDULER_HTTP_PORT=8003

      - USE_HTTP_CLIENT=true
      # OpenTelemetry configuration
      # - OTEL_SDK_DISABLED=true
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4317
      - OTEL_EXPORTER_OTLP_INSECURE=true
      - OTEL_SERVICE_NAME=api-gateway
      - OTEL_RESOURCE_ATTRIBUTES=service.namespace=agent-team,deployment.environment=development
    dns:
      - 1.1.1.1
      - 8.8.8.8
    depends_on:
      redis:
        condition: service_healthy
      # workflow-agent:
      #   condition: service_healthy
      # workflow-engine:
      #   condition: service_healthy
    volumes:
      - ./shared/proto:/app/shared/proto:ro
      - api_gateway_logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/public/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s # Matches production configuration
    restart: unless-stopped
    networks:
      - agent-team-network

# ======================
# Volumes
# ======================
volumes:
  redis_data:
    driver: local
  workflow_agent_logs:
    driver: local
  workflow_engine_logs:
    driver: local
  workflow_scheduler_logs:
    driver: local
  api_gateway_logs:
    driver: local

# ======================
# Networks
# ======================
networks:
  agent-team-network:
    driver: bridge
