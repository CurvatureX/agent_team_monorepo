"use client";

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { 
  Mail, 
  Play, 
  CheckCircle, 
  XCircle, 
  AlertCircle,
  Loader2,
  Shield,
  ExternalLink,
  Send,
  AtSign,
  Server,
  Key,
  FileText
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

const USER_ID = '7ba36345-a2bb-4ec9-a001-bb46d79d629d';

interface ExecutionResult {
  execution_id: string;
  status: string;
  output_data: any;
  error_message?: string;
  logs: string[];
}

interface EmailFormData {
  to: string;
  cc: string;
  bcc: string;
  subject: string;
  body: string;
  smtpServer: string;
  port: number;
  username: string;
  password: string;
  useTls: boolean;
  contentType: 'text/plain' | 'text/html';
}

export default function EmailTestPage() {
  const [isLoading, setIsLoading] = useState(false);
  const [lastResult, setLastResult] = useState<ExecutionResult | null>(null);
  const [workflowId, setWorkflowId] = useState<string | null>(null);
  const { toast } = useToast();

  const [formData, setFormData] = useState<EmailFormData>({
    to: 'test@example.com',
    cc: '',
    bcc: '',
    subject: 'Test Email from Agent Team',
    body: `<h2>Hello from Agent Team! 📧</h2>

<p>This is a test email sent through our <strong>external API integration system</strong>.</p>

<h3>Key Features:</h3>
<ul>
  <li>✅ SMTP Integration</li>
  <li>✅ HTML Email Support</li>
  <li>✅ CC/BCC Recipients</li>
  <li>✅ TLS Encryption</li>
  <li>✅ Attachment Support</li>
</ul>

<p>Best regards,<br/>
<em>The Agent Team Bot</em> 🤖</p>

<hr/>
<small>This email was automatically generated by our workflow automation system.</small>`,
    smtpServer: 'smtp.gmail.com',
    port: 587,
    username: 'your-email@gmail.com',
    password: 'your-app-password',
    useTls: true,
    contentType: 'text/html'
  });

  // 创建测试工作流
  const createTestWorkflow = async () => {
    const response = await fetch('http://localhost:8002/v1/workflows', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({
        user_id: USER_ID,
        name: 'Email SMTP Test',
        description: 'Test workflow for sending emails via SMTP',
        settings: {
          timeout: 300,
          retry_count: 3
        },
        nodes: [{
          id: 'email_send_node',
          name: 'Send Email via SMTP',
          type: 'EXTERNAL_ACTION_NODE',
          subtype: 'EMAIL',
          parameters: {
            to: formData.to.split(',').map(e => e.trim()),
            subject: formData.subject,
            body: formData.body,
            smtp_server: formData.smtpServer,
            username: formData.username,
            password: formData.password
          },
          position: { x: 100, y: 100 }
        }],
        connections: {},
        trigger: {
          type: 'manual',
          config: {}
        }
      })
    });

    if (!response.ok) {
      throw new Error('Failed to create workflow');
    }

    const data = await response.json();
    return data.workflow.id;
  };

  // 执行Email节点
  const executeEmailNode = async () => {
    try {
      let currentWorkflowId = workflowId;
      if (!currentWorkflowId) {
        currentWorkflowId = await createTestWorkflow();
        setWorkflowId(currentWorkflowId);
      }

      // 构建参数
      const parameters: any = {
        to: formData.to.split(',').map(e => e.trim()).filter(e => e),
        subject: formData.subject,
        body: formData.body,
        smtp_server: formData.smtpServer,
        port: formData.port,
        username: formData.username,
        password: formData.password,
        use_tls: formData.useTls,
        content_type: formData.contentType
      };

      // 添加可选的CC和BCC
      if (formData.cc.trim()) {
        parameters.cc = formData.cc.split(',').map(e => e.trim()).filter(e => e);
      }
      if (formData.bcc.trim()) {
        parameters.bcc = formData.bcc.split(',').map(e => e.trim()).filter(e => e);
      }

      const requestBody: any = {
        user_id: USER_ID,
        input_data: {},
        execution_context: {
          override_parameters: parameters
        }
      };

      const response = await fetch(
        `http://localhost:8002/v1/workflows/${currentWorkflowId}/nodes/email_send_node/execute`,
        {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(requestBody)
        }
      );

      if (!response.ok) {
        throw new Error(`API request failed: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      console.error('Execute node error:', error);
      throw error;
    }
  };

  // 主执行函数
  const handleExecuteNode = async () => {
    setIsLoading(true);
    setLastResult(null);

    try {
      toast({
        title: "发送邮件",
        description: "正在通过SMTP发送邮件..."
      });

      const result = await executeEmailNode();
      setLastResult(result);

      if (result.status === 'COMPLETED' && result.output_data?.success !== false) {
        toast({
          title: "邮件发送成功！",
          description: `邮件已成功发送到 ${formData.to}`,
          variant: "default"
        });
      } else {
        toast({
          title: "发送失败",
          description: result.error_message || result.output_data?.error || "邮件发送出现错误",
          variant: "destructive"
        });
      }

    } catch (error: any) {
      console.error('Execution error:', error);
      toast({
        title: "执行失败",
        description: error.message || "发生未知错误",
        variant: "destructive"
      });
    } finally {
      setIsLoading(false);
    }
  };

  // 验证SMTP连接
  const testSmtpConnection = async () => {
    try {
      const response = await fetch('http://localhost:8002/api/v1/credentials/test-connection', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          provider: 'email',
          credentials: {
            smtp_server: formData.smtpServer,
            port: formData.port,
            username: formData.username,
            password: formData.password,
            use_tls: formData.useTls
          }
        })
      });

      const result = await response.json();
      
      if (result.credentials_valid) {
        toast({
          title: "连接成功",
          description: "SMTP服务器连接测试成功",
          variant: "default"
        });
      } else {
        toast({
          title: "连接失败",
          description: result.error || "无法连接到SMTP服务器",
          variant: "destructive"
        });
      }
    } catch (error: any) {
      toast({
        title: "测试失败",
        description: error.message || "连接测试出现错误",
        variant: "destructive"
      });
    }
  };

  return (
    <div className="container mx-auto p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold flex items-center gap-2">
            <Mail className="w-8 h-8" />
            Email SMTP 集成测试
          </h1>
          <p className="text-gray-600 mt-2">
            测试SMTP邮件发送集成 - 支持HTML邮件、附件、CC/BCC等功能
          </p>
        </div>
      </div>

      {/* 邮件内容配置 */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="w-5 h-5" />
            邮件内容配置
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            <div className="space-y-2">
              <Label htmlFor="to">收件人 *</Label>
              <Input
                id="to"
                value={formData.to}
                onChange={(e) => setFormData({...formData, to: e.target.value})}
                placeholder="email1@example.com, email2@example.com"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="cc">抄送 (CC)</Label>
              <Input
                id="cc"
                value={formData.cc}
                onChange={(e) => setFormData({...formData, cc: e.target.value})}
                placeholder="可选，多个邮箱用逗号分隔"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="bcc">密送 (BCC)</Label>
              <Input
                id="bcc"
                value={formData.bcc}
                onChange={(e) => setFormData({...formData, bcc: e.target.value})}
                placeholder="可选，多个邮箱用逗号分隔"
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="subject">邮件主题 *</Label>
            <Input
              id="subject"
              value={formData.subject}
              onChange={(e) => setFormData({...formData, subject: e.target.value})}
              placeholder="输入邮件主题"
            />
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="contentType">邮件格式</Label>
              <select 
                className="w-full p-2 border rounded-md"
                value={formData.contentType}
                onChange={(e) => setFormData({...formData, contentType: e.target.value as any})}
              >
                <option value="text/html">HTML格式</option>
                <option value="text/plain">纯文本</option>
              </select>
            </div>
          </div>

          <div className="space-y-2">
            <Label htmlFor="body">邮件正文 *</Label>
            <Textarea
              id="body"
              value={formData.body}
              onChange={(e) => setFormData({...formData, body: e.target.value})}
              placeholder={formData.contentType === 'text/html' ? "输入HTML格式的邮件内容" : "输入纯文本邮件内容"}
              rows={8}
            />
          </div>
        </CardContent>
      </Card>

      {/* SMTP服务器配置 */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Server className="w-5 h-5" />
            SMTP服务器配置
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="smtpServer">SMTP服务器 *</Label>
              <Input
                id="smtpServer"
                value={formData.smtpServer}
                onChange={(e) => setFormData({...formData, smtpServer: e.target.value})}
                placeholder="smtp.gmail.com"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="port">端口 *</Label>
              <Input
                id="port"
                type="number"
                value={formData.port}
                onChange={(e) => setFormData({...formData, port: parseInt(e.target.value) || 587})}
                placeholder="587"
              />
            </div>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div className="space-y-2">
              <Label htmlFor="username">用户名/邮箱 *</Label>
              <Input
                id="username"
                value={formData.username}
                onChange={(e) => setFormData({...formData, username: e.target.value})}
                placeholder="your-email@gmail.com"
              />
            </div>
            <div className="space-y-2">
              <Label htmlFor="password">密码/应用专用密码 *</Label>
              <Input
                id="password"
                type="password"
                value={formData.password}
                onChange={(e) => setFormData({...formData, password: e.target.value})}
                placeholder="输入密码或应用专用密码"
              />
            </div>
          </div>

          <div className="flex items-center space-x-2">
            <input
              type="checkbox"
              id="useTls"
              checked={formData.useTls}
              onChange={(e) => setFormData({...formData, useTls: e.target.checked})}
              className="w-4 h-4"
            />
            <Label htmlFor="useTls">使用TLS加密 (推荐)</Label>
          </div>

          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
            <h4 className="font-medium text-yellow-800 mb-2">⚠️ 安全提示</h4>
            <div className="text-sm text-yellow-700 space-y-1">
              <p>• <strong>Gmail</strong>: 需要使用应用专用密码，不能使用普通登录密码</p>
              <p>• <strong>Outlook</strong>: 服务器 smtp-mail.outlook.com:587</p>
              <p>• <strong>QQ邮箱</strong>: 服务器 smtp.qq.com:587，需要开启SMTP服务</p>
              <p>• <strong>163邮箱</strong>: 服务器 smtp.163.com:25或465</p>
            </div>
          </div>

          <Button 
            onClick={testSmtpConnection}
            variant="outline"
            className="w-full"
          >
            <Shield className="w-4 h-4 mr-2" />
            测试SMTP连接
          </Button>
        </CardContent>
      </Card>

      {/* 执行按钮 */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <Send className="w-5 h-5" />
            发送邮件
          </CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          <div className="bg-green-50 border border-green-200 rounded-lg p-4">
            <h3 className="font-medium text-green-900 mb-2">📧 邮件发送流程</h3>
            <div className="text-sm text-green-700 space-y-1">
              <p>1. 配置收件人和邮件内容</p>
              <p>2. 设置正确的SMTP服务器信息</p>
              <p>3. 建议先测试SMTP连接确保配置正确</p>
              <p>4. 点击发送邮件按钮</p>
              <p>5. 系统将通过SMTP服务器发送邮件</p>
              <p>6. 检查收件人邮箱确认邮件接收</p>
            </div>
          </div>

          <Button 
            onClick={handleExecuteNode}
            disabled={isLoading}
            className="w-full bg-blue-600 hover:bg-blue-700"
            size="lg"
          >
            {isLoading ? (
              <>
                <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                发送中...
              </>
            ) : (
              <>
                <Mail className="w-4 h-4 mr-2" />
                发送邮件
              </>
            )}
          </Button>

          {/* 执行结果 */}
          {lastResult && (
            <div className="mt-4 space-y-4">
              <div className="flex items-center gap-2">
                <h4 className="font-medium">执行结果:</h4>
                {lastResult.status === 'COMPLETED' ? (
                  <CheckCircle className="w-4 h-4 text-green-500" />
                ) : (
                  <XCircle className="w-4 h-4 text-red-500" />
                )}
                <Badge 
                  variant={lastResult.status === 'COMPLETED' ? 'default' : 'destructive'}
                >
                  {lastResult.status}
                </Badge>
              </div>

              {/* 成功结果展示 */}
              {lastResult.status === 'COMPLETED' && lastResult.output_data?.success && (
                <div className="bg-green-50 border border-green-200 rounded-lg p-4 space-y-3">
                  <h5 className="font-medium text-green-800 flex items-center gap-2">
                    <CheckCircle className="w-4 h-4" />
                    邮件发送成功！
                  </h5>
                  
                  <div className="space-y-2 text-sm">
                    {lastResult.output_data.recipients && (
                      <div>
                        <p><strong>收件人统计:</strong></p>
                        <ul className="ml-4 space-y-1">
                          <li>• 收件人 (TO): {lastResult.output_data.recipients.to?.join(', ') || '无'}</li>
                          {lastResult.output_data.recipients.cc?.length > 0 && (
                            <li>• 抄送 (CC): {lastResult.output_data.recipients.cc.join(', ')}</li>
                          )}
                          {lastResult.output_data.recipients.bcc?.length > 0 && (
                            <li>• 密送 (BCC): {lastResult.output_data.recipients.bcc.join(', ')}</li>
                          )}
                          <li>• 总收件人: {lastResult.output_data.recipients.total} 人</li>
                        </ul>
                      </div>
                    )}
                    
                    <p><strong>邮件主题:</strong> {lastResult.output_data.subject}</p>
                    <p><strong>SMTP服务器:</strong> {lastResult.output_data.smtp_server}</p>
                    <p><strong>发送时间:</strong> {lastResult.output_data.sent_at}</p>
                  </div>

                  <div className="bg-blue-50 border border-blue-200 rounded p-3 text-blue-800">
                    <p className="font-medium">🎉 验证步骤：</p>
                    <p className="text-sm mt-1">
                      1. 检查收件人邮箱（包括垃圾邮件文件夹）<br/>
                      2. 确认邮件主题和内容是否正确<br/>
                      3. 验证HTML格式是否正常显示
                    </p>
                  </div>
                </div>
              )}

              {/* 详细响应数据 */}
              <details className="bg-gray-50 rounded-lg">
                <summary className="cursor-pointer p-3 font-medium text-gray-700 hover:bg-gray-100 rounded-lg">
                  查看详细响应数据
                </summary>
                <div className="p-3 pt-0">
                  <pre className="text-xs overflow-auto max-h-80 bg-white p-3 rounded border">
                    {JSON.stringify(lastResult.output_data, null, 2)}
                  </pre>
                </div>
              </details>

              {lastResult.logs && lastResult.logs.length > 0 && (
                <details className="bg-gray-50 rounded-lg">
                  <summary className="cursor-pointer p-3 font-medium text-gray-700 hover:bg-gray-100 rounded-lg">
                    查看执行日志
                  </summary>
                  <div className="p-3 pt-0">
                    <div className="bg-white rounded border p-3 text-sm space-y-1">
                      {lastResult.logs.map((log, index) => (
                        <div key={index} className="font-mono text-xs">• {log}</div>
                      ))}
                    </div>
                  </div>
                </details>
              )}
            </div>
          )}
        </CardContent>
      </Card>

      {/* 使用说明 */}
      <Card>
        <CardHeader>
          <CardTitle>使用说明</CardTitle>
        </CardHeader>
        <CardContent className="space-y-3 text-sm text-gray-600">
          <p>• <strong>HTML邮件</strong>: 支持富文本格式，可以包含链接、图片、表格等HTML元素</p>
          <p>• <strong>纯文本邮件</strong>: 适用于简单文本内容，兼容性更好</p>
          <p>• <strong>多收件人</strong>: TO、CC、BCC字段都支持多个邮箱地址，用逗号分隔</p>
          <p>• <strong>SMTP配置</strong>: 不同邮件服务商需要不同的SMTP设置</p>
          <p>• <strong>安全连接</strong>: 建议开启TLS加密保证传输安全</p>
          <p>• <strong>应用密码</strong>: Gmail等服务需要使用应用专用密码而非登录密码</p>
          <p>• <strong>连接测试</strong>: 发送前可先测试SMTP连接确保配置正确</p>
        </CardContent>
      </Card>
    </div>
  );
}